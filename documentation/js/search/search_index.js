var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/modules/ApiModule.html",[0,0.894,1,1.958]],["body/modules/ApiModule.html",[0,1.477,1,3.851,2,1.467,3,1.467,4,1.713,5,1.713,6,1.467,7,1.713,8,1.713,9,3.139,10,3.139,11,3.653,12,0.028,13,3.332,14,3.332,15,2.24,16,1.713,17,1.713,18,0.304,19,0.264,20,0.264,21,3.734,22,2.649,23,0.534,24,0.579,25,3.734,26,3.734,27,3.139,28,0.304,29,0.048,30,0.016,31,0.021,32,0.016]],["title/injectables/AppAuthGuard.html",[33,0.712,34,1.958]],["body/injectables/AppAuthGuard.html",[12,0.029,18,0.412,19,0.193,20,0.193,23,0.428,24,0.424,28,0.223,29,0.035,30,0.012,31,0.017,32,0.012,33,0.852,34,2.342,35,1.159,36,2.297,37,1.361,38,2.589,39,3.398,40,3.006,41,3.311,42,3.311,43,3.883,44,3.311,45,3.939,46,3.939,47,3.311,48,3.939,49,3.939,50,0.317,51,1.151,52,3.311,53,3.939,54,1.074,55,2.297,56,4.692,57,0.851,58,2.733,59,1.453,60,1.35,61,0.726,62,1.453,63,3.311,64,4.249,65,2.733,66,2.297,67,1.151,68,3.939,69,1.454,70,2.733,71,4.619,72,3.311,73,2.733,74,1.796,75,1.796,76,2.297,77,2.733,78,1.159,79,0.859,80,2.297,81,1.625,82,2.297,83,2.733,84,2.733,85,2.297,86,1.074,87,3.939,88,2.733,89,2.297,90,1.35,91,1.361,92,2.733,93,2.733,94,2.733,95,2.733,96,2.297,97,2.733,98,2.733,99,2.733,100,2.733,101,2.733,102,2.733,103,1.361,104,1.159]],["title/controllers/AppController.html",[105,1.2,106,2.164]],["body/controllers/AppController.html",[12,0.028,18,0.341,19,0.296,20,0.296,23,0.487,24,0.65,28,0.341,29,0.054,30,0.018,31,0.022,32,0.018,50,0.487,51,1.536,57,0.772,67,1.225,78,1.778,79,1.318,90,1.225,105,1.917,106,3.455,107,1.528,108,3.523,109,5.064,110,1.528,111,4.191,112,2.23,113,3.117,114,3.523,115,4.191]],["title/modules/AppModule.html",[0,0.894,116,2.164]],["body/modules/AppModule.html",[0,1.315,1,3.415,2,1.171,3,1.171,4,1.367,5,1.367,6,1.171,7,2.223,8,1.367,12,0.029,15,1.922,16,1.367,17,1.367,18,0.243,19,0.211,20,0.211,22,2.628,23,0.558,24,0.462,28,0.243,29,0.038,30,0.013,31,0.018,32,0.013,61,0.549,91,1.483,106,3.184,107,1.527,113,3.116,114,2.504,116,4.161,117,2.504,118,2.504,119,2.504,120,2.635,121,3.508,122,2.979,123,2.979,124,1.958,125,1.958,126,1.367,127,2.979,128,2.979,129,2.055,130,1.958,131,2.979,132,2.504,133,1.086,134,2.192,135,2.979,136,2.979,137,2.979,138,2.979,139,2.979,140,2.979,141,2.979,142,1.958,143,2.979,144,2.979,145,2.979,146,2.979,147,2.979,148,2.979,149,2.504]],["title/injectables/AppService.html",[33,0.712,113,1.787]],["body/injectables/AppService.html",[12,0.028,18,0.358,19,0.311,20,0.311,23,0.408,24,0.683,28,0.358,29,0.057,30,0.019,31,0.023,32,0.019,33,1.172,35,1.867,50,0.511,51,1.584,57,0.811,67,1.287,90,1.287,109,5.153,112,2.299,113,2.941,150,3.701,151,4.403,152,4.403,153,4.403]],["title/controllers/AuthController.html",[105,1.2,154,2.164]],["body/controllers/AuthController.html",[12,0.029,18,0.263,19,0.228,20,0.228,23,0.528,24,0.501,28,0.263,29,0.042,30,0.014,31,0.019,32,0.014,39,2.376,50,0.375,51,1.295,57,0.816,59,1.394,60,1.295,61,0.816,62,1.394,67,1.295,69,1.599,78,1.37,79,1.016,81,3.007,90,1.295,105,1.178,107,1.178,110,1.615,133,2.147,154,2.912,155,2.715,156,2.123,157,3.725,158,3.725,159,3.23,160,2.953,161,3.23,162,3.23,163,4.431,164,2.308,165,2.715,166,3.23,167,3.23,168,2.123,169,2.123,170,2.518,171,2.376,172,2.376,173,2.376,174,3.23,175,3.23,176,3.23,177,3.23,178,3.23,179,3.23,180,3.23,181,3.23]],["title/modules/AuthModule.html",[0,0.894,120,1.511]],["body/modules/AuthModule.html",[0,1.282,2,1.118,3,1.118,4,1.306,5,1.306,6,1.118,7,2.168,8,1.306,12,0.029,14,3.07,15,1.861,16,1.306,17,1.306,18,0.232,19,0.201,20,0.201,22,2.2,23,0.576,24,0.442,28,0.232,29,0.037,30,0.012,31,0.017,32,0.012,34,3.463,38,1.871,74,1.871,75,1.871,107,1.479,120,2.881,129,2.004,130,1.871,132,2.393,133,1.038,134,2.094,149,2.393,154,3.105,170,2.817,171,2.094,182,2.393,183,2.846,184,2.393,185,3.365,186,2.846,187,2.846,188,2.094,189,2.846,190,2.846,191,2.846,192,2.846,193,2.846,194,4.056,195,2.019,196,2.846,197,2.846,198,2.846,199,2.846,200,2.846,201,2.393,202,2.846,203,2.846,204,2.393,205,2.846]],["title/injectables/AuthService.html",[33,0.712,170,1.64]],["body/injectables/AuthService.html",[12,0.029,18,0.192,19,0.167,20,0.167,23,0.509,24,0.367,28,0.192,29,0.03,30,0.01,31,0.015,32,0.01,33,0.765,35,1.002,50,0.274,51,1.034,54,1.391,57,0.868,59,1.482,60,1.377,61,0.868,62,1.482,67,1.24,69,1.597,79,1.335,81,3.436,86,1.983,90,1.24,103,1.176,104,1.002,129,1.999,130,1.553,133,2.106,157,2.975,158,2.975,160,2.981,164,2.247,165,2.975,170,1.762,172,1.738,173,1.738,188,1.738,206,1.986,207,2.975,208,2.362,209,5.299,210,4.243,211,2.346,212,4.243,213,2.362,214,3.539,215,2.362,216,2.975,217,2.362,218,2.975,219,2.362,220,1.553,221,1.553,222,2.362,223,1.501,224,1.986,225,2.113,226,1.624,227,2.362,228,2.362,229,1.738,230,1.738,231,2.362,232,2.362,233,1.29,234,2.362,235,1.986,236,3.539,237,1.553,238,2.362,239,1.738,240,2.362,241,3.539,242,2.362,243,2.362,244,2.362,245,2.362,246,2.362,247,2.362,248,2.362]],["title/modules/ConfigurationModule.html",[0,0.894,121,1.958]],["body/modules/ConfigurationModule.html",[0,1.523,2,1.565,3,1.565,4,1.827,5,1.827,6,1.565,7,2.335,8,2.574,12,0.028,15,2.335,16,1.827,17,1.827,18,0.324,19,0.281,20,0.281,23,0.471,24,0.618,28,0.324,29,0.051,30,0.017,31,0.022,32,0.017,104,1.689,121,3.633,129,2.728,204,3.347,249,3.347,250,3.347,251,3.982,252,3.982,253,3.982,254,3.982]],["title/injectables/ConfigurationService.html",[33,0.712,129,1.397]],["body/injectables/ConfigurationService.html",[12,0.029,18,0.203,19,0.176,20,0.176,23,0.448,24,0.388,28,0.203,29,0.032,30,0.011,31,0.016,32,0.011,33,0.798,35,1.059,50,0.29,51,1.078,54,0.981,57,0.892,59,1.38,60,1.282,61,1.058,62,1.38,67,1.078,79,1.38,86,1.723,90,1.078,103,1.244,104,1.059,112,2.646,129,1.565,225,2.693,255,2.1,256,1.693,257,5.408,258,3.689,259,3.689,260,3.689,261,2.498,262,3.689,263,2.498,264,4.844,265,3.689,266,4.844,267,2.498,268,3.101,269,3.689,270,3.689,271,3.689,272,3.689,273,3.689,274,3.101,275,3.689,276,3.101,277,2.498,278,2.498,279,2.498,280,2.498,281,2.498,282,1.837,283,3.689,284,2.498,285,2.498,286,2.498,287,2.498,288,2.498,289,2.498,290,2.1,291,2.498,292,2.498,293,5.408,294,2.498,295,2.498,296,3.689,297,2.498,298,2.498,299,2.498,300,2.498,301,2.498,302,2.883,303,1.837,304,3.689,305,2.498,306,2.498,307,2.498,308,2.498]],["title/interfaces/IJwtPayload.html",[160,1.787,309,2.164]],["body/interfaces/IJwtPayload.html",[12,0.027,18,0.364,19,0.315,20,0.315,28,0.364,30,0.019,31,0.023,32,0.019,50,0.518,61,1.007,112,2.728,142,4.048,160,2.966,237,4.048,256,2.509,309,2.934,310,4.464,311,3.753]],["title/injectables/JwtStrategy.html",[33,0.712,185,1.958]],["body/injectables/JwtStrategy.html",[12,0.029,18,0.26,19,0.225,20,0.225,23,0.543,24,0.495,28,0.26,29,0.041,30,0.014,31,0.019,32,0.014,33,0.949,35,1.352,38,2.095,50,0.37,51,1.283,54,1.252,57,0.809,59,1.381,60,1.283,61,0.809,62,1.381,67,0.931,69,1.363,72,3.69,74,2.095,76,2.679,78,1.352,79,1.381,80,2.679,86,1.252,90,0.931,103,1.587,104,1.352,129,2.295,130,2.095,133,1.831,134,3.695,160,2.936,170,2.921,171,2.345,172,2.345,185,2.611,201,2.679,207,3.69,216,2.679,218,3.69,225,1.587,226,1.462,312,2.679,313,3.187,314,3.187,315,3.187,316,3.187,317,3.187,318,3.187,319,2.679,320,3.187,321,3.187,322,3.187,323,3.187,324,3.187]],["title/classes/Note.html",[29,0.043,325,1.64]],["body/classes/Note.html",[12,0.029,18,0.245,19,0.213,20,0.213,23,0.451,28,0.245,29,0.054,30,0.013,31,0.018,32,0.013,50,0.349,54,1.182,57,1.061,59,0.946,60,1.232,61,1.09,62,0.946,69,1.432,110,2.026,112,2.238,256,1.935,325,2.099,326,1.497,327,2.528,328,3.2,329,4.093,330,2.424,331,4.093,332,4.093,333,3.544,334,4.671,335,4.216,336,3.007,337,3.544,338,3.007,339,4.088,340,3.007,341,1.788,342,3.582,343,3.007,344,4.436,345,3.007,346,3.007,347,3.007,348,2.771,349,3.007,350,4.216,351,1.497,352,2.212,353,2.528,354,1.976,355,2.528,356,3.007,357,1.976,358,3.007,359,3.007,360,2.528]],["title/classes/NoteDto.html",[29,0.043,361,1.958]],["body/classes/NoteDto.html",[12,0.028,18,0.318,19,0.276,20,0.276,23,0.361,28,0.318,29,0.065,30,0.017,31,0.021,32,0.017,37,1.942,50,0.453,57,1.023,61,1.023,110,1.831,112,2.489,256,2.305,325,2.501,326,1.942,329,4.67,330,2.766,332,4.67,341,2.131,361,2.987,362,3.279,363,5.023,364,5.104,365,3.901,366,3.901,367,3.901,368,2.564]],["title/controllers/NotesController.html",[105,1.2,369,2.164]],["body/controllers/NotesController.html",[12,0.029,18,0.16,19,0.139,20,0.139,23,0.493,24,0.305,28,0.16,29,0.025,30,0.008,31,0.013,32,0.008,50,0.228,51,0.898,57,0.697,59,1.191,60,1.106,61,0.566,62,1.191,67,1.106,69,1.337,78,0.833,79,0.618,86,1.936,90,1.106,103,2.313,104,2.26,105,0.716,107,0.716,110,1.38,133,1.997,156,1.291,164,2.09,168,2.02,169,2.02,195,0.978,220,1.291,221,1.291,226,2.132,229,2.261,230,2.261,233,0.716,268,1.652,282,1.445,325,2.132,328,1.291,331,1.652,341,1.606,344,1.652,348,1.291,352,1.445,355,1.652,361,3.168,369,2.02,370,1.652,371,1.965,372,3.182,373,3.149,374,2.584,375,1.965,376,1.965,377,1.965,378,1.965,379,4.141,380,1.965,381,3.599,382,1.965,383,4.646,384,1.965,385,1.965,386,1.965,387,1.965,388,1.445,389,1.965,390,1.965,391,1.965,392,1.445,393,1.445,394,0.772,395,1.445,396,1.667,397,1.652,398,1.445,399,1.652,400,1.965,401,1.965,402,2.785,403,3.785,404,1.965,405,3.785,406,1.965,407,1.652,408,1.652,409,2.785,410,1.965,411,1.965,412,2.584,413,5.328,414,1.828,415,3.073,416,3.073,417,1.965,418,1.965,419,3.073,420,1.965,421,1.965,422,1.965,423,1.965,424,3.073,425,1.445,426,1.965,427,1.965,428,1.965,429,1.965,430,1.652,431,1.965,432,1.965,433,1.965,434,1.965,435,1.965,436,3.785,437,1.965,438,1.965,439,1.965]],["title/modules/NotesModule.html",[0,0.894,11,1.958]],["body/modules/NotesModule.html",[0,1.466,2,1.445,3,1.445,4,1.687,5,1.687,6,1.445,7,2.478,8,1.687,11,3.637,12,0.029,15,2.218,16,1.687,17,1.687,18,0.299,19,0.26,20,0.26,22,1.995,23,0.566,24,0.57,28,0.299,29,0.047,30,0.016,31,0.021,32,0.016,107,1.762,120,2.218,124,2.416,125,2.416,126,1.687,325,1.83,369,3.549,396,3.318,397,3.09,398,2.704,440,3.09,441,3.09,442,3.676,443,3.555,444,3.676,445,3.676]],["title/injectables/NotesService.html",[33,0.712,396,1.787]],["body/injectables/NotesService.html",[12,0.029,18,0.189,19,0.164,20,0.164,23,0.487,24,0.359,28,0.189,29,0.03,30,0.01,31,0.015,32,0.01,33,0.754,35,0.983,50,0.269,51,1.019,54,0.91,57,0.922,59,1.574,60,1.463,61,0.922,62,1.574,67,1.364,69,1.614,79,0.729,90,1.641,126,1.063,133,2.197,164,2.382,225,1.153,226,2.141,302,3.067,325,2.861,328,2.292,330,1.153,341,1.779,351,1.153,352,1.704,361,1.377,373,2.566,374,2.932,381,3.923,396,1.892,398,1.704,399,1.947,414,2.775,425,2.566,446,1.947,447,3.487,448,2.316,449,3.067,450,2.316,451,3.487,452,3.487,453,2.316,454,3.487,455,2.316,456,3.487,457,2.316,458,3.487,459,2.316,460,1.704,461,1.704,462,2.316,463,3.433,464,2.316,465,3.433,466,3.433,467,2.316,468,2.316,469,2.316]],["title/classes/Role.html",[29,0.043,223,1.397]],["body/classes/Role.html",[12,0.028,18,0.306,19,0.266,20,0.266,23,0.454,28,0.306,29,0.049,30,0.016,31,0.021,32,0.016,37,1.874,50,0.437,57,0.904,60,1.1,61,1.006,91,2.443,110,1.789,223,2.455,233,1.372,256,2.252,326,1.874,330,2.719,339,3.61,341,2.081,342,4.017,348,3.804,351,1.874,394,2.146,470,3.163,471,4.591,472,3.763,473,4.907,474,4.125,475,3.763,476,3.763,477,3.763]],["title/classes/RoleDto.html",[29,0.043,478,2.164]],["body/classes/RoleDto.html",[12,0.028,18,0.34,19,0.295,20,0.295,23,0.485,28,0.34,29,0.068,30,0.018,31,0.022,32,0.018,50,0.485,57,0.966,61,0.966,110,1.521,256,2.406,326,2.078,330,2.855,341,2.224,364,4.82,368,2.742,394,2.253,471,4.82,478,3.446,479,3.508,480,4.173,481,4.173,482,3.07]],["title/controllers/RolesController.html",[105,1.2,483,2.164]],["body/controllers/RolesController.html",[12,0.029,18,0.269,19,0.234,20,0.234,23,0.549,24,0.513,28,0.269,29,0.043,30,0.014,31,0.019,32,0.014,37,1.647,50,0.384,51,1.316,57,0.609,67,0.967,78,1.403,79,1.041,86,1.3,90,0.967,103,1.647,104,1.403,105,1.206,107,1.206,110,1.206,133,1.867,156,2.174,164,1.91,168,2.174,169,2.174,195,1.647,220,2.174,221,2.174,223,1.403,226,1.518,233,2.213,373,2.434,388,2.434,392,2.434,393,2.434,394,1.3,402,2.434,407,2.781,408,2.781,409,2.434,482,2.434,483,2.96,484,2.781,485,3.308,486,4.504,487,4.504,488,4.621,489,3.308,490,4.504,491,3.308,492,2.242,493,2.781,494,2.434,495,3.308,496,2.781,497,2.781,498,3.308]],["title/guards/RolesGuard.html",[40,1.958,195,1.64]],["body/guards/RolesGuard.html",[12,0.029,18,0.203,19,0.176,20,0.176,23,0.5,24,0.387,28,0.203,29,0.032,30,0.011,31,0.016,32,0.011,33,0.796,37,1.24,39,2.708,40,2.877,41,3.095,42,3.095,43,4.067,44,3.095,50,0.289,51,1.076,52,4.067,54,0.979,55,2.094,56,4.542,57,0.807,59,1.377,60,1.28,61,0.807,62,1.377,63,3.095,64,4.067,66,2.094,67,1.076,69,1.189,75,1.637,78,1.057,79,0.784,85,3.095,86,1.721,89,2.094,90,1.414,91,1.24,164,1.562,173,1.833,195,1.833,223,2.292,224,2.094,225,2.18,233,1.97,235,2.094,357,1.637,379,2.094,394,2.028,412,2.094,414,1.481,430,3.095,499,2.491,500,2.094,501,3.682,502,3.682,503,3.682,504,3.682,505,3.682,506,3.682,507,2.491,508,2.491,509,3.095,510,4.379,511,3.682,512,4.379,513,2.491,514,2.094,515,2.094,516,2.491,517,2.491,518,2.491,519,2.094,520,2.491,521,2.491,522,1.833,523,2.491,524,2.491]],["title/modules/RolesModule.html",[0,0.894,13,1.787]],["body/modules/RolesModule.html",[0,1.431,2,1.376,3,1.376,4,1.607,5,1.607,6,1.376,7,2.418,8,2.418,12,0.029,13,3.342,15,2.147,16,1.607,17,1.607,18,0.285,19,0.247,20,0.247,22,1.9,23,0.558,24,0.543,28,0.285,29,0.045,30,0.015,31,0.02,32,0.015,107,1.706,120,2.147,124,2.301,125,2.301,126,1.607,223,1.485,443,3.443,483,3.464,492,3.238,493,2.944,494,2.576,525,2.944,526,2.944,527,2.944,528,3.502,529,3.502,530,3.502]],["title/injectables/RolesService.html",[33,0.712,492,1.64]],["body/injectables/RolesService.html",[12,0.029,18,0.24,19,0.209,20,0.209,23,0.511,24,0.458,28,0.24,29,0.038,30,0.013,31,0.018,32,0.013,33,0.9,35,1.252,37,1.47,50,0.343,51,1.216,54,1.16,57,0.888,59,1.309,60,1.216,61,0.767,62,1.309,67,1.216,79,0.928,86,1.16,90,1.53,126,1.354,133,2.087,164,2.22,223,2.044,225,1.47,226,1.909,233,1.517,302,2.735,351,1.47,394,2.25,414,2.475,449,3.44,460,2.171,461,2.171,463,3.061,465,3.061,466,3.061,482,2.171,488,4.4,492,2.072,494,2.171,531,2.481,532,4.161,533,4.161,534,2.951,535,2.951,536,4.161,537,2.951,538,4.161,539,2.951,540,2.951,541,2.951,542,2.951,543,2.951]],["title/classes/User.html",[29,0.043,69,0.894]],["body/classes/User.html",[12,0.029,18,0.234,19,0.203,20,0.203,23,0.44,28,0.234,29,0.053,30,0.012,31,0.017,32,0.012,50,0.333,54,1.128,57,1.045,59,0.903,60,1.388,61,1.045,62,0.903,69,1.108,91,2.364,110,1.991,112,2.193,142,3.121,223,2.193,233,1.731,237,3.121,239,3.493,256,1.873,326,1.43,330,2.364,333,3.431,334,4.592,337,3.431,339,4.018,341,1.731,342,3.493,348,2.683,351,1.43,353,2.414,354,1.888,357,2.683,360,2.414,474,3.431,509,3.431,544,2.414,545,2.872,546,2.872,547,4.082,548,2.872,549,2.872,550,2.872,551,2.872,552,2.872,553,2.872,554,4.082,555,2.872,556,4.082,557,2.872,558,2.872,559,4.082,560,2.872,561,4.082,562,2.872,563,2.872,564,2.872,565,2.872,566,2.872]],["title/controllers/UsersController.html",[105,1.2,567,2.164]],["body/controllers/UsersController.html",[12,0.029,18,0.186,19,0.162,20,0.162,23,0.503,24,0.355,28,0.186,29,0.03,30,0.01,31,0.015,32,0.01,50,0.266,51,1.01,57,0.637,59,1.087,60,1.01,61,0.637,62,1.087,67,1.01,69,1.475,78,0.971,79,0.72,86,1.957,90,1.01,91,2.073,103,2.479,104,2.112,105,0.834,107,0.834,110,1.26,112,1.766,133,1.909,156,1.504,164,1.967,168,1.504,169,2.271,195,1.14,211,2.073,220,1.504,221,1.504,226,2.128,229,2.542,230,2.542,233,0.834,239,2.542,282,2.542,341,2.221,357,2.271,388,1.684,392,1.684,393,1.684,394,0.899,395,1.684,402,2.542,409,2.542,497,2.905,519,1.924,522,1.684,567,2.271,568,1.924,569,2.289,570,3.456,571,3.456,572,2.289,573,5.596,574,2.289,575,2.289,576,4.639,577,2.289,578,3.573,579,2.289,580,2.289,581,3.456,582,1.924,583,1.684,584,2.289,585,2.289,586,2.289,587,2.289,588,3.456,589,3.456,590,4.639,591,2.289,592,5.236,593,3.456,594,3.456,595,3.456,596,2.289,597,2.289,598,2.289,599,2.289,600,2.289,601,2.289]],["title/modules/UsersModule.html",[0,0.894,14,1.787]],["body/modules/UsersModule.html",[0,1.392,2,1.304,3,1.304,4,1.523,5,1.523,6,1.304,7,2.354,8,2.354,12,0.029,13,3.222,14,3.401,15,2.071,16,1.523,17,1.523,18,0.27,19,0.235,20,0.235,22,2.449,23,0.562,24,0.515,27,2.791,28,0.27,29,0.043,30,0.014,31,0.019,32,0.014,69,0.901,107,1.646,120,2.071,124,2.182,125,2.182,126,1.523,211,3.21,443,3.321,567,3.371,582,2.791,583,2.442,602,2.791,603,3.32,604,2.791,605,2.791,606,3.32,607,3.32,608,3.32]],["title/classes/UsersRolesDto.html",[29,0.043,578,2.164]],["body/classes/UsersRolesDto.html",[12,0.028,18,0.34,19,0.295,20,0.295,23,0.531,28,0.34,29,0.074,30,0.018,31,0.022,32,0.018,50,0.485,57,0.769,61,1.056,110,1.521,233,2.09,256,2.406,326,2.078,354,2.742,368,2.742,478,3.953,578,3.446,609,3.508,610,4.173,611,4.173,612,5.243,613,4.173]],["title/injectables/UsersService.html",[33,0.712,211,1.64]],["body/injectables/UsersService.html",[12,0.029,18,0.172,19,0.149,20,0.149,23,0.489,24,0.328,28,0.172,29,0.027,30,0.009,31,0.014,32,0.009,33,0.703,35,0.896,50,0.245,51,0.95,54,0.83,57,0.935,59,1.596,60,1.483,61,0.935,62,1.596,67,1.404,69,1.519,78,0.896,79,1.022,86,0.83,90,1.636,112,2.315,126,0.969,133,2.152,142,1.388,164,2.315,211,1.619,225,1.052,226,2.205,237,2.137,302,2.925,330,1.619,341,1.681,351,1.052,372,2.733,394,0.83,395,1.554,414,2.857,425,2.391,449,2.925,460,1.554,461,1.554,463,3.274,465,3.274,466,3.274,492,2.216,496,2.733,522,1.554,583,1.554,614,1.776,615,3.251,616,3.251,617,3.251,618,2.112,619,3.963,620,2.112,621,3.251,622,2.112,623,3.251,624,2.112,625,3.251,626,2.112,627,3.251,628,2.112,629,3.251,630,2.112,631,3.251,632,2.112,633,2.112,634,3.251,635,2.112,636,2.112,637,2.112,638,3.251,639,2.112,640,3.251,641,2.112,642,2.112]],["title/coverage.html",[643,3.303]],["body/coverage.html",[6,1.122,12,0.028,20,0.202,29,0.073,30,0.012,31,0.017,32,0.012,33,1.288,34,1.698,36,2.4,40,1.698,61,0.526,69,0.775,81,1.698,104,1.211,105,1.987,106,1.876,108,2.4,113,1.549,129,1.211,150,2.4,154,1.876,155,2.4,160,1.549,170,1.421,185,1.698,195,1.421,206,2.4,211,1.421,223,1.211,233,1.041,255,2.4,309,1.876,311,2.4,312,2.4,325,1.421,327,2.4,361,1.698,362,2.4,369,1.876,370,2.4,396,1.549,446,2.4,470,2.4,478,1.876,479,2.4,483,1.876,484,2.4,492,1.421,500,2.4,531,2.4,544,2.4,567,1.876,568,2.4,578,1.876,609,2.4,614,2.4,643,2.1,644,2.855,645,2.855,646,2.855,647,5.157,648,5.157,649,6.491,650,4.733,651,2.855,652,2.855,653,5.45,654,2.855,655,2.855,656,2.855,657,2.855,658,4.733,659,2.855,660,2.4,661,4.064,662,4.733,663,2.4,664,2.855,665,2.855,666,2.4,667,2.855,668,2.855,669,2.855]],["title/dependencies.html",[3,1.556,670,2.752]],["body/dependencies.html",[3,1.571,12,0.029,24,0.62,29,0.066,30,0.017,31,0.022,32,0.017,38,2.628,74,2.628,75,2.628,82,3.361,126,1.835,188,2.942,274,3.361,276,3.361,319,4.29,351,1.991,354,2.628,368,2.628,515,3.361,671,6.118,672,3.998,673,3.998,674,3.998,675,3.998,676,3.998,677,3.998,678,3.998,679,3.998,680,3.998,681,3.998,682,3.998,683,3.998,684,3.998,685,3.998,686,3.998,687,3.998,688,3.998]],["title/miscellaneous/enumerations.html",[689,1.493,690,3.328]],["body/miscellaneous/enumerations.html",[12,0.027,30,0.021,31,0.024,32,0.021,50,0.563,69,1.56,303,4.227,394,2.258,689,2.63,690,4.076,691,4.848,692,4.848,693,5.746]],["title/miscellaneous/functions.html",[689,1.493,694,3.328]],["body/miscellaneous/functions.html",[6,2.443,12,0.025,30,0.021,31,0.025,32,0.021,50,0.584,666,4.225,689,2.727,694,4.225,695,5.026]],["title/index.html",[50,0.32,696,2.752,697,2.752]],["body/index.html",[12,0.027,19,0.242,30,0.015,31,0.02,32,0.015,37,1.706,47,2.88,96,2.88,290,4.382,328,2.252,449,2.252,643,2.521,698,3.426,699,3.426,700,4.612,701,3.426,702,3.426,703,3.426,704,3.426,705,3.426,706,3.426,707,3.426,708,3.426,709,3.426,710,5.213,711,3.426,712,3.426,713,3.426,714,5.213,715,6.126,716,3.426,717,3.426,718,3.426,719,5.995,720,3.426,721,3.426,722,4.612,723,3.426,724,3.426,725,3.426,726,3.426,727,4.612,728,3.426,729,3.426,730,3.426,731,3.877,732,4.612,733,4.612,734,3.426,735,3.426,736,3.426,737,3.426,738,3.426,739,3.426,740,3.426,741,3.426,742,3.426,743,3.426,744,3.426,745,3.426,746,3.426,747,3.426,748,3.426,749,3.426,750,3.426,751,3.426,752,3.426,753,3.426,754,3.426]],["title/modules.html",[2,1.764]],["body/modules.html",[1,2.606,2,1.722,11,2.606,12,0.023,13,2.378,14,2.378,30,0.019,31,0.023,32,0.019,116,2.88,120,2.011,121,2.606,731,5.454,755,6.487,756,6.487,757,6.487]],["title/overview.html",[758,3.774]],["body/overview.html",[0,0.789,1,3.62,2,1.142,3,1.142,4,1.334,5,1.334,6,1.142,7,1.334,8,1.334,9,2.443,10,2.443,11,3.263,12,0.028,13,3.178,14,3.303,15,1.889,16,1.334,17,1.334,30,0.012,31,0.017,32,0.012,34,2.842,35,1.233,40,1.729,107,1.06,113,2.593,116,4.057,117,2.443,118,2.443,119,2.443,120,2.864,121,3.091,129,2.205,170,2.38,182,2.443,184,2.443,185,2.842,211,2.917,249,2.443,250,2.443,309,1.91,326,1.447,396,2.593,440,2.443,441,2.443,492,2.917,525,2.443,526,2.443,527,2.443,602,2.443,604,2.443,605,2.443,758,2.443,759,2.907,760,2.907,761,2.907,762,2.907,763,4.117]],["title/miscellaneous/variables.html",[689,1.493,764,3.328]],["body/miscellaneous/variables.html",[12,0.028,30,0.019,31,0.024,32,0.019,50,0.533,81,3.308,91,2.287,233,2.028,303,4.092,394,1.805,514,4.676,660,3.861,663,3.861,689,2.492,764,3.861,765,4.593,766,4.593,767,5.563,768,4.593,769,4.593]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/ApiModule.html":{},"injectables/AppAuthGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Note.html":{},"classes/NoteDto.html":{},"controllers/NotesController.html":{},"modules/NotesModule.html":{},"injectables/NotesService.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRolesDto.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["0.2.17",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":662,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":658,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":651,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":659,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":652,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":763,"title":{},"body":{"overview.html":{}}}],["1/2",{"_index":657,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":655,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":648,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":665,"title":{},"body":{"coverage.html":{}}}],["14.3.1",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["2.6.2",{"_index":686,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":664,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":647,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":654,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":760,"title":{},"body":{"overview.html":{}}}],["50",{"_index":656,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":547,"title":{},"body":{"classes/User.html":{}}}],["6",{"_index":762,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["6.1.0",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["6.3.3",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":759,"title":{},"body":{"overview.html":{}}}],["7.10.0",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":761,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["access",{"_index":44,"title":{},"body":{"injectables/AppAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["access_token",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstoken",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["active",{"_index":573,"title":{},"body":{"controllers/UsersController.html":{}}}],["add",{"_index":92,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["admin",{"_index":693,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["amazing",{"_index":739,"title":{},"body":{"index.html":{}}}],["angular",{"_index":709,"title":{},"body":{"index.html":{}}}],["api",{"_index":487,"title":{},"body":{"controllers/RolesController.html":{}}}],["api/api.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["api/notes",{"_index":371,"title":{},"body":{"controllers/NotesController.html":{}}}],["api/roles",{"_index":485,"title":{},"body":{"controllers/RolesController.html":{}}}],["api/roles/entities/role.entity",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["api/users",{"_index":569,"title":{},"body":{"controllers/UsersController.html":{}}}],["api/users/entities/user.entity",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["api/users/users.module",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["api/users/users.service",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["apimodule",{"_index":1,"title":{"modules/ApiModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["app",{"_index":47,"title":{},"body":{"injectables/AppAuthGuard.html":{},"index.html":{}}}],["app's",{"_index":42,"title":{},"body":{"injectables/AppAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["app.controller",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":114,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{}}}],["appauthguard",{"_index":34,"title":{"injectables/AppAuthGuard.html":{}},"body":{"injectables/AppAuthGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["appcontroller",{"_index":106,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":706,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":116,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":113,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotesController.html":{},"injectables/NotesService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":39,"title":{},"body":{"injectables/AppAuthGuard.html":{},"controllers/AuthController.html":{},"guards/RolesGuard.html":{}}}],["auth.controller",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.module.ts",{"_index":49,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["auth.service",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["auth/auth.module",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/NotesModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["auth/decorators/role.decorator",{"_index":392,"title":{},"body":{"controllers/NotesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/guards/roles.guard",{"_index":393,"title":{},"body":{"controllers/NotesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["authcontroller",{"_index":154,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":94,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["authguard",{"_index":73,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["authguard('jwt",{"_index":77,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["authmodule",{"_index":120,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/NotesModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":328,"title":{},"body":{"classes/Note.html":{},"controllers/NotesController.html":{},"injectables/NotesService.html":{},"index.html":{}}}],["author.email",{"_index":359,"title":{},"body":{"classes/Note.html":{}}}],["authservice",{"_index":170,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotesController.html":{},"injectables/NotesService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":740,"title":{},"body":{"index.html":{}}}],["bash",{"_index":714,"title":{},"body":{"index.html":{}}}],["body",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"controllers/NotesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":509,"title":{},"body":{"guards/RolesGuard.html":{},"classes/User.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/NotesModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":757,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":755,"title":{},"body":{"modules.html":{}}}],["building",{"_index":701,"title":{},"body":{"index.html":{}}}],["call",{"_index":98,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["canactivate",{"_index":52,"title":{},"body":{"injectables/AppAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":63,"title":{},"body":{"injectables/AppAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["catch",{"_index":465,"title":{},"body":{"injectables/NotesService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["class",{"_index":29,"title":{"classes/Note.html":{},"classes/NoteDto.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"classes/User.html":{},"classes/UsersRolesDto.html":{}},"body":{"modules/ApiModule.html":{},"injectables/AppAuthGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"classes/Note.html":{},"classes/NoteDto.html":{},"controllers/NotesController.html":{},"modules/NotesModule.html":{},"injectables/NotesService.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRolesDto.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":326,"title":{},"body":{"classes/Note.html":{},"classes/NoteDto.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"classes/User.html":{},"classes/UsersRolesDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":391,"title":{},"body":{"controllers/NotesController.html":{}}}],["cluster_apimodule",{"_index":9,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_apimodule_imports",{"_index":10,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_configurationmodule",{"_index":249,"title":{},"body":{"modules/ConfigurationModule.html":{},"overview.html":{}}}],["cluster_configurationmodule_exports",{"_index":250,"title":{},"body":{"modules/ConfigurationModule.html":{},"overview.html":{}}}],["cluster_notesmodule",{"_index":440,"title":{},"body":{"modules/NotesModule.html":{},"overview.html":{}}}],["cluster_notesmodule_providers",{"_index":441,"title":{},"body":{"modules/NotesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":525,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":526,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":527,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":602,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":604,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":603,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":605,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":471,"title":{},"body":{"classes/Role.html":{},"classes/RoleDto.html":{}}}],["column",{"_index":339,"title":{},"body":{"classes/Note.html":{},"classes/Role.html":{},"classes/User.html":{}}}],["column({length",{"_index":546,"title":{},"body":{"classes/User.html":{}}}],["column({type",{"_index":472,"title":{},"body":{"classes/Role.html":{}}}],["config",{"_index":277,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["configservice",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('db_host",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_type",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_expiration_delay",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret_key",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configuration.service",{"_index":252,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configuration/configuration.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration/configuration.service",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["configurationmodule",{"_index":121,"title":{"modules/ConfigurationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules.html":{},"overview.html":{}}}],["configurationservice",{"_index":129,"title":{"injectables/ConfigurationService.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["configurationservice(`environments/${process.env.node_env}.env",{"_index":254,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configured",{"_index":45,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["confservice",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":86,"title":{},"body":{"injectables/AppAuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":54,"title":{},"body":{"injectables/AppAuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"classes/Note.html":{},"injectables/NotesService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectrepository(note",{"_index":462,"title":{},"body":{"injectables/NotesService.html":{}}}],["constructor(@injectrepository(role",{"_index":540,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(authservice",{"_index":313,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(filepath",{"_index":259,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["constructor(jwtservice",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(noterepository",{"_index":448,"title":{},"body":{"injectables/NotesService.html":{}}}],["constructor(partial",{"_index":333,"title":{},"body":{"classes/Note.html":{},"classes/User.html":{}}}],["constructor(private",{"_index":78,"title":{},"body":{"injectables/AppAuthGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/NotesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":55,"title":{},"body":{"injectables/AppAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["constructor(rolerepository",{"_index":534,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(roleservice",{"_index":618,"title":{},"body":{"injectables/UsersService.html":{}}}],["content",{"_index":329,"title":{},"body":{"classes/Note.html":{},"classes/NoteDto.html":{}}}],["context",{"_index":66,"title":{},"body":{"injectables/AppAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":89,"title":{},"body":{"injectables/AppAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":518,"title":{},"body":{"guards/RolesGuard.html":{}}}],["control",{"_index":41,"title":{},"body":{"injectables/AppAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":105,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/NotesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/NotesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('api/notes",{"_index":400,"title":{},"body":{"controllers/NotesController.html":{}}}],["controller('api/roles",{"_index":495,"title":{},"body":{"controllers/RolesController.html":{}}}],["controller('api/users",{"_index":585,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller('auth",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["controllers",{"_index":107,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/NotesController.html":{},"modules/NotesModule.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":643,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":372,"title":{},"body":{"controllers/NotesController.html":{},"injectables/UsersService.html":{}}}],["create(@req",{"_index":411,"title":{},"body":{"controllers/NotesController.html":{}}}],["create(request",{"_index":375,"title":{},"body":{"controllers/NotesController.html":{}}}],["create(user",{"_index":621,"title":{},"body":{"injectables/UsersService.html":{}}}],["createdatecolumn",{"_index":350,"title":{},"body":{"classes/Note.html":{}}}],["createdatecolumn({type",{"_index":345,"title":{},"body":{"classes/Note.html":{}}}],["crypto",{"_index":631,"title":{},"body":{"injectables/UsersService.html":{}}}],["crypto.createhmac('sha256",{"_index":641,"title":{},"body":{"injectables/UsersService.html":{}}}],["custom",{"_index":93,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["daclared",{"_index":83,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["database",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":344,"title":{},"body":{"classes/Note.html":{},"controllers/NotesController.html":{}}}],["db_host",{"_index":294,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["db_name",{"_index":299,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["db_password",{"_index":298,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["db_port",{"_index":295,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["db_type",{"_index":292,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["db_username",{"_index":297,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/NotesModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":110,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Note.html":{},"classes/NoteDto.html":{},"controllers/NotesController.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersRolesDto.html":{}}}],["decorators/public.decorator",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["default",{"_index":767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default('dev",{"_index":291,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["defaultstrategy",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["define",{"_index":269,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["defined",{"_index":57,"title":{},"body":{"injectables/AppAuthGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"classes/Note.html":{},"classes/NoteDto.html":{},"controllers/NotesController.html":{},"injectables/NotesService.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersRolesDto.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":373,"title":{},"body":{"controllers/NotesController.html":{},"injectables/NotesService.html":{},"controllers/RolesController.html":{}}}],["delete(':noteid",{"_index":432,"title":{},"body":{"controllers/NotesController.html":{}}}],["delete(':noteid')@useguards(rolesguard)@roles(rolecode.user",{"_index":382,"title":{},"body":{"controllers/NotesController.html":{}}}],["delete(@req",{"_index":433,"title":{},"body":{"controllers/NotesController.html":{}}}],["delete(note",{"_index":452,"title":{},"body":{"injectables/NotesService.html":{}}}],["delete(request",{"_index":380,"title":{},"body":{"controllers/NotesController.html":{}}}],["deletednote",{"_index":436,"title":{},"body":{"controllers/NotesController.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/NotesModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":37,"title":{},"body":{"injectables/AppAuthGuard.html":{},"classes/NoteDto.html":{},"classes/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"index.html":{}}}],["development",{"_index":718,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":644,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":84,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["dotenv",{"_index":274,"title":{},"body":{"injectables/ConfigurationService.html":{},"dependencies.html":{}}}],["dotenv.parse(fs.readfilesync(filepath",{"_index":278,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["dto",{"_index":363,"title":{},"body":{"classes/NoteDto.html":{}}}],["dtos/note.dto",{"_index":399,"title":{},"body":{"controllers/NotesController.html":{},"injectables/NotesService.html":{}}}],["dtos/usersroles.dto",{"_index":584,"title":{},"body":{"controllers/UsersController.html":{}}}],["e2e",{"_index":728,"title":{},"body":{"index.html":{}}}],["each",{"_index":503,"title":{},"body":{"guards/RolesGuard.html":{}}}],["eager",{"_index":554,"title":{},"body":{"classes/User.html":{}}}],["efficient",{"_index":702,"title":{},"body":{"index.html":{}}}],["email",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IJwtPayload.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["encryptpassword",{"_index":615,"title":{},"body":{"injectables/UsersService.html":{}}}],["encryptpassword(password",{"_index":623,"title":{},"body":{"injectables/UsersService.html":{}}}],["endpoint",{"_index":43,"title":{},"body":{"injectables/AppAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["entities",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/note.entity",{"_index":398,"title":{},"body":{"controllers/NotesController.html":{},"modules/NotesModule.html":{},"injectables/NotesService.html":{}}}],["entities/role.entity",{"_index":494,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entities/role.enum",{"_index":482,"title":{},"body":{"classes/RoleDto.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["entities/user.entity",{"_index":583,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":348,"title":{},"body":{"classes/Note.html":{},"controllers/NotesController.html":{},"classes/Role.html":{},"classes/User.html":{}}}],["enumerations",{"_index":690,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":270,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["envconfig",{"_index":257,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["envvarsschema",{"_index":283,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["err",{"_index":71,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["error",{"_index":302,"title":{},"body":{"injectables/ConfigurationService.html":{},"injectables/NotesService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["error(`config",{"_index":306,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["error.message",{"_index":308,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["establish",{"_index":100,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["example",{"_index":97,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["exclude",{"_index":561,"title":{},"body":{"classes/User.html":{}}}],["exclude()@column",{"_index":551,"title":{},"body":{"classes/User.html":{}}}],["executioncontext",{"_index":64,"title":{},"body":{"injectables/AppAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["expires_in",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":28,"title":{},"body":{"modules/ApiModule.html":{},"injectables/AppAuthGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Note.html":{},"classes/NoteDto.html":{},"controllers/NotesController.html":{},"modules/NotesModule.html":{},"injectables/NotesService.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRolesDto.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/NotesModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":76,"title":{},"body":{"injectables/AppAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":317,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":322,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":357,"title":{},"body":{"classes/Note.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["false})@transform(undefined",{"_index":338,"title":{},"body":{"classes/Note.html":{}}}],["file",{"_index":20,"title":{},"body":{"modules/ApiModule.html":{},"injectables/AppAuthGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Note.html":{},"classes/NoteDto.html":{},"controllers/NotesController.html":{},"modules/NotesModule.html":{},"injectables/NotesService.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRolesDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filepath",{"_index":261,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["filled",{"_index":502,"title":{},"body":{"guards/RolesGuard.html":{}}}],["findall",{"_index":488,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findallbyuser",{"_index":374,"title":{},"body":{"controllers/NotesController.html":{},"injectables/NotesService.html":{}}}],["findallbyuser(@req",{"_index":404,"title":{},"body":{"controllers/NotesController.html":{}}}],["findallbyuser(request",{"_index":385,"title":{},"body":{"controllers/NotesController.html":{}}}],["findallbyuser(user",{"_index":454,"title":{},"body":{"injectables/NotesService.html":{}}}],["findbyemail",{"_index":616,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemail(email",{"_index":625,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid",{"_index":617,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid(id",{"_index":627,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyrolecode",{"_index":533,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyrolecode(rolecode",{"_index":538,"title":{},"body":{"injectables/RolesService.html":{}}}],["findonebyidanduser",{"_index":447,"title":{},"body":{"injectables/NotesService.html":{}}}],["findonebyidanduser(user",{"_index":456,"title":{},"body":{"injectables/NotesService.html":{}}}],["forwardref",{"_index":443,"title":{},"body":{"modules/NotesModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"controllers/NotesController.html":{},"controllers/UsersController.html":{}}}],["framework",{"_index":700,"title":{},"body":{"index.html":{}}}],["fs",{"_index":275,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["function",{"_index":667,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":694,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':userid/activation",{"_index":596,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':userid/activation')@useguards(rolesguard)@roles(rolecode.admin",{"_index":574,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@useguards(rolesguard)@roles(rolecode.admin",{"_index":489,"title":{},"body":{"controllers/RolesController.html":{}}}],["get()@useguards(rolesguard)@roles(rolecode.user",{"_index":386,"title":{},"body":{"controllers/NotesController.html":{}}}],["get(key",{"_index":262,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["gethello",{"_index":109,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":696,"title":{"index.html":{}},"body":{}}],["global",{"_index":273,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["globally",{"_index":46,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["grow",{"_index":736,"title":{},"body":{"index.html":{}}}],["guard",{"_index":40,"title":{"guards/RolesGuard.html":{}},"body":{"injectables/AppAuthGuard.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":499,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/appauth.guard",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{}}}],["guards/roles.guard",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["handlerequest",{"_index":53,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["handlerequest(err",{"_index":68,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["hasrole",{"_index":506,"title":{},"body":{"guards/RolesGuard.html":{}}}],["hasrole(rolecodes",{"_index":511,"title":{},"body":{"guards/RolesGuard.html":{}}}],["heavily",{"_index":707,"title":{},"body":{"index.html":{}}}],["hello",{"_index":152,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":96,"title":{},"body":{"injectables/AppAuthGuard.html":{},"index.html":{}}}],["host",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["httpexception",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"controllers/NotesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["httpexception('unable",{"_index":407,"title":{},"body":{"controllers/NotesController.html":{},"controllers/RolesController.html":{}}}],["httpexception('user",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception(`error",{"_index":594,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpexception(`note[noteid=${notedto.id",{"_index":418,"title":{},"body":{"controllers/NotesController.html":{}}}],["httpexception(`note[noteid=${noteid",{"_index":435,"title":{},"body":{"controllers/NotesController.html":{}}}],["httpexception(`the",{"_index":599,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpexception(`unable",{"_index":438,"title":{},"body":{"controllers/NotesController.html":{}}}],["httpexception(`user",{"_index":589,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpexception(message",{"_index":427,"title":{},"body":{"controllers/NotesController.html":{}}}],["https://nestjs.com",{"_index":751,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"controllers/NotesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.bad_request",{"_index":601,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpstatus.internal_server_error",{"_index":409,"title":{},"body":{"controllers/NotesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.not_found",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"controllers/NotesController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.ok",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["id",{"_index":330,"title":{},"body":{"classes/Note.html":{},"classes/NoteDto.html":{},"injectables/NotesService.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["id=${userid",{"_index":590,"title":{},"body":{"controllers/UsersController.html":{}}}],["identifier",{"_index":645,"title":{},"body":{"coverage.html":{}}}],["ijwtpayload",{"_index":160,"title":{"interfaces/IJwtPayload.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["implements",{"_index":517,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":23,"title":{},"body":{"modules/ApiModule.html":{},"injectables/AppAuthGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"classes/Note.html":{},"classes/NoteDto.html":{},"controllers/NotesController.html":{},"modules/NotesModule.html":{},"injectables/NotesService.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRolesDto.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":22,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/NotesModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":50,"title":{"index.html":{}},"body":{"injectables/AppAuthGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigurationService.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Note.html":{},"classes/NoteDto.html":{},"controllers/NotesController.html":{},"injectables/NotesService.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersRolesDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":18,"title":{},"body":{"modules/ApiModule.html":{},"injectables/AppAuthGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Note.html":{},"classes/NoteDto.html":{},"controllers/NotesController.html":{},"modules/NotesModule.html":{},"injectables/NotesService.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRolesDto.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["injectable",{"_index":33,"title":{"injectables/AppAuthGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"injectables/NotesService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppAuthGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"injectables/NotesService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":35,"title":{},"body":{"injectables/AppAuthGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"injectables/NotesService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":461,"title":{},"body":{"injectables/NotesService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(user",{"_index":633,"title":{},"body":{"injectables/UsersService.html":{}}}],["inspired",{"_index":708,"title":{},"body":{"index.html":{}}}],["install",{"_index":716,"title":{},"body":{"index.html":{}}}],["installation",{"_index":713,"title":{},"body":{"index.html":{}}}],["interface",{"_index":309,"title":{"interfaces/IJwtPayload.html":{}},"body":{"interfaces/IJwtPayload.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":310,"title":{},"body":{"interfaces/IJwtPayload.html":{}}}],["interfaces/ijwtpayload",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["isactive",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["isnotempty",{"_index":364,"title":{},"body":{"classes/NoteDto.html":{},"classes/RoleDto.html":{}}}],["ispublic",{"_index":87,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["joi",{"_index":276,"title":{},"body":{"injectables/ConfigurationService.html":{},"dependencies.html":{}}}],["joi.number().required",{"_index":296,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["joi.object",{"_index":285,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["joi.objectschema",{"_index":284,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["joi.string",{"_index":287,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["joi.string().required",{"_index":293,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["joi.validate",{"_index":305,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["join",{"_index":742,"title":{},"body":{"index.html":{}}}],["jointable",{"_index":559,"title":{},"body":{"classes/User.html":{}}}],["jwt",{"_index":38,"title":{},"body":{"injectables/AppAuthGuard.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_expiration_delay",{"_index":301,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["jwt_secret_key",{"_index":300,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["jwtfromrequest",{"_index":321,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["jwtservice",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":185,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":748,"title":{},"body":{"index.html":{}}}],["key",{"_index":264,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["lastmodificationdate",{"_index":331,"title":{},"body":{"classes/Note.html":{},"controllers/NotesController.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/NotesModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":563,"title":{},"body":{"classes/User.html":{}}}],["license",{"_index":754,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":733,"title":{},"body":{"index.html":{}}}],["literal",{"_index":266,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["logger",{"_index":460,"title":{},"body":{"injectables/NotesService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["logger.error(error",{"_index":466,"title":{},"body":{"injectables/NotesService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["logic",{"_index":95,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["login",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(jwtpayload",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(payload",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["manytomany",{"_index":558,"title":{},"body":{"classes/User.html":{}}}],["manytomany(type",{"_index":566,"title":{},"body":{"classes/User.html":{}}}],["manytoone",{"_index":349,"title":{},"body":{"classes/Note.html":{}}}],["manytoone(type",{"_index":356,"title":{},"body":{"classes/Note.html":{}}}],["manytoone(undefined",{"_index":336,"title":{},"body":{"classes/Note.html":{}}}],["matching",{"_index":31,"title":{},"body":{"modules/ApiModule.html":{},"injectables/AppAuthGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Note.html":{},"classes/NoteDto.html":{},"controllers/NotesController.html":{},"modules/NotesModule.html":{},"injectables/NotesService.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRolesDto.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":423,"title":{},"body":{"controllers/NotesController.html":{}}}],["metadata",{"_index":82,"title":{},"body":{"injectables/AppAuthGuard.html":{},"dependencies.html":{}}}],["methods",{"_index":51,"title":{},"body":{"injectables/AppAuthGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotesController.html":{},"injectables/NotesService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":689,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":732,"title":{},"body":{"index.html":{}}}],["mode",{"_index":722,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/NotesModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/NotesModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/NotesModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":745,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":749,"title":{},"body":{"index.html":{}}}],["name",{"_index":60,"title":{},"body":{"injectables/AppAuthGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"classes/Note.html":{},"controllers/NotesController.html":{},"injectables/NotesService.html":{},"classes/Role.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":85,"title":{},"body":{"injectables/AppAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["needs",{"_index":430,"title":{},"body":{"controllers/NotesController.html":{},"guards/RolesGuard.html":{}}}],["nest",{"_index":710,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":753,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":24,"title":{},"body":{"modules/ApiModule.html":{},"injectables/AppAuthGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotesController.html":{},"modules/NotesModule.html":{},"injectables/NotesService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":75,"title":{},"body":{"injectables/AppAuthGuard.html":{},"modules/AuthModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":74,"title":{},"body":{"injectables/AppAuthGuard.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/NotesModule.html":{},"injectables/NotesService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":104,"title":{},"body":{"injectables/AppAuthGuard.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":699,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":286,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["note",{"_index":325,"title":{"classes/Note.html":{}},"body":{"classes/Note.html":{},"classes/NoteDto.html":{},"controllers/NotesController.html":{},"modules/NotesModule.html":{},"injectables/NotesService.html":{},"coverage.html":{}}}],["note[noteid=${notedto.id",{"_index":426,"title":{},"body":{"controllers/NotesController.html":{}}}],["note[noteid=${noteid",{"_index":439,"title":{},"body":{"controllers/NotesController.html":{}}}],["notedto",{"_index":361,"title":{"classes/NoteDto.html":{}},"body":{"classes/NoteDto.html":{},"controllers/NotesController.html":{},"injectables/NotesService.html":{},"coverage.html":{}}}],["notedto.id",{"_index":415,"title":{},"body":{"controllers/NotesController.html":{}}}],["noteid",{"_index":381,"title":{},"body":{"controllers/NotesController.html":{},"injectables/NotesService.html":{}}}],["noterepository",{"_index":451,"title":{},"body":{"injectables/NotesService.html":{}}}],["notes",{"_index":355,"title":{},"body":{"classes/Note.html":{},"controllers/NotesController.html":{}}}],["notes.controller",{"_index":444,"title":{},"body":{"modules/NotesModule.html":{}}}],["notes.service",{"_index":397,"title":{},"body":{"controllers/NotesController.html":{},"modules/NotesModule.html":{}}}],["notes/notes.module",{"_index":25,"title":{},"body":{"modules/ApiModule.html":{}}}],["notescontroller",{"_index":369,"title":{"controllers/NotesController.html":{}},"body":{"controllers/NotesController.html":{},"modules/NotesModule.html":{},"coverage.html":{}}}],["noteservice",{"_index":401,"title":{},"body":{"controllers/NotesController.html":{}}}],["notesmodule",{"_index":11,"title":{"modules/NotesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/NotesModule.html":{},"modules.html":{},"overview.html":{}}}],["notesservice",{"_index":396,"title":{"injectables/NotesService.html":{}},"body":{"controllers/NotesController.html":{},"modules/NotesModule.html":{},"injectables/NotesService.html":{},"coverage.html":{},"overview.html":{}}}],["npm",{"_index":715,"title":{},"body":{"index.html":{}}}],["null",{"_index":414,"title":{},"body":{"controllers/NotesController.html":{},"injectables/NotesService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["nullable",{"_index":337,"title":{},"body":{"classes/Note.html":{},"classes/User.html":{}}}],["number",{"_index":341,"title":{},"body":{"classes/Note.html":{},"classes/NoteDto.html":{},"controllers/NotesController.html":{},"injectables/NotesService.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object.assign(this",{"_index":360,"title":{},"body":{"classes/Note.html":{},"classes/User.html":{}}}],["observable",{"_index":510,"title":{},"body":{"guards/RolesGuard.html":{}}}],["open",{"_index":734,"title":{},"body":{"index.html":{}}}],["optional",{"_index":62,"title":{},"body":{"injectables/AppAuthGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"classes/Note.html":{},"controllers/NotesController.html":{},"injectables/NotesService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":17,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/NotesModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":758,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":670,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":282,"title":{},"body":{"injectables/ConfigurationService.html":{},"controllers/NotesController.html":{},"controllers/UsersController.html":{}}}],["param('noteid",{"_index":434,"title":{},"body":{"controllers/NotesController.html":{}}}],["parameters",{"_index":59,"title":{},"body":{"injectables/AppAuthGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"classes/Note.html":{},"controllers/NotesController.html":{},"injectables/NotesService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":271,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["partial",{"_index":334,"title":{},"body":{"classes/Note.html":{},"classes/User.html":{}}}],["passport",{"_index":319,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":316,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":320,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"interfaces/IJwtPayload.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["password).digest('hex",{"_index":642,"title":{},"body":{"injectables/UsersService.html":{}}}],["payload",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["pg",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":743,"title":{},"body":{"index.html":{}}}],["port",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"controllers/NotesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["post(':userid/roles",{"_index":586,"title":{},"body":{"controllers/UsersController.html":{}}}],["post(':userid/roles')@useguards(rolesguard)@roles(rolecode.admin",{"_index":579,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('login",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@useguards(rolesguard)@roles(rolecode.user",{"_index":376,"title":{},"body":{"controllers/NotesController.html":{}}}],["prefix",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"controllers/NotesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":342,"title":{},"body":{"classes/Note.html":{},"classes/Role.html":{},"classes/User.html":{}}}],["private",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"injectables/NotesService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["prod",{"_index":289,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["production",{"_index":724,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":698,"title":{},"body":{"index.html":{}}}],["project",{"_index":735,"title":{},"body":{"index.html":{}}}],["promise",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/NotesController.html":{},"injectables/NotesService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":256,"title":{},"body":{"injectables/ConfigurationService.html":{},"interfaces/IJwtPayload.html":{},"classes/Note.html":{},"classes/NoteDto.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"classes/User.html":{},"classes/UsersRolesDto.html":{}}}],["provide",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/NotesModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":81,"title":{},"body":{"injectables/AppAuthGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('login",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('register",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["query",{"_index":581,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('active",{"_index":598,"title":{},"body":{"controllers/UsersController.html":{}}}],["read",{"_index":744,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":79,"title":{},"body":{"injectables/AppAuthGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotesController.html":{},"injectables/NotesService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reflect",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":56,"title":{},"body":{"injectables/AppAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["regenerated",{"_index":431,"title":{},"body":{"controllers/NotesController.html":{}}}],["register",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(user",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["repository",{"_index":449,"title":{},"body":{"injectables/NotesService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":389,"title":{},"body":{"controllers/NotesController.html":{}}}],["request",{"_index":379,"title":{},"body":{"controllers/NotesController.html":{},"guards/RolesGuard.html":{}}}],["request.user",{"_index":412,"title":{},"body":{"controllers/NotesController.html":{},"guards/RolesGuard.html":{}}}],["reset",{"_index":16,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/NotesModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["rest",{"_index":486,"title":{},"body":{"controllers/RolesController.html":{}}}],["result",{"_index":30,"title":{},"body":{"modules/ApiModule.html":{},"injectables/AppAuthGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Note.html":{},"classes/NoteDto.html":{},"controllers/NotesController.html":{},"modules/NotesModule.html":{},"injectables/NotesService.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRolesDto.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":32,"title":{},"body":{"modules/ApiModule.html":{},"injectables/AppAuthGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Note.html":{},"classes/NoteDto.html":{},"controllers/NotesController.html":{},"modules/NotesModule.html":{},"injectables/NotesService.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRolesDto.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":408,"title":{},"body":{"controllers/NotesController.html":{},"controllers/RolesController.html":{}}}],["return",{"_index":90,"title":{},"body":{"injectables/AppAuthGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotesController.html":{},"injectables/NotesService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":67,"title":{},"body":{"injectables/AppAuthGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotesController.html":{},"injectables/NotesService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":685,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":223,"title":{"classes/Role.html":{}},"body":{"injectables/AuthService.html":{},"classes/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"coverage.html":{}}}],["role.enum",{"_index":477,"title":{},"body":{"classes/Role.html":{}}}],["role.name",{"_index":565,"title":{},"body":{"classes/User.html":{}}}],["rolecode",{"_index":394,"title":{},"body":{"controllers/NotesController.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rolecode.admin",{"_index":383,"title":{},"body":{"controllers/NotesController.html":{}}}],["rolecode.admin)@useinterceptors(classserializerinterceptor",{"_index":377,"title":{},"body":{"controllers/NotesController.html":{}}}],["rolecode.tostring",{"_index":543,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolecode.user",{"_index":490,"title":{},"body":{"controllers/RolesController.html":{}}}],["rolecodes",{"_index":514,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["rolecodes.find(rolecode",{"_index":524,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roledto",{"_index":478,"title":{"classes/RoleDto.html":{}},"body":{"classes/RoleDto.html":{},"classes/UsersRolesDto.html":{},"coverage.html":{}}}],["rolerepository",{"_index":536,"title":{},"body":{"injectables/RolesService.html":{}}}],["roles",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"controllers/NotesController.html":{},"classes/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersRolesDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(rolecode.admin",{"_index":497,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["roles(rolecode.user",{"_index":403,"title":{},"body":{"controllers/NotesController.html":{}}}],["roles.controller",{"_index":529,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.service",{"_index":493,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/dtos/role.dto",{"_index":613,"title":{},"body":{"classes/UsersRolesDto.html":{}}}],["roles/entities/role.entity",{"_index":560,"title":{},"body":{"classes/User.html":{}}}],["roles/entities/role.enum",{"_index":395,"title":{},"body":{"controllers/NotesController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["roles/roles.module",{"_index":27,"title":{},"body":{"modules/ApiModule.html":{},"modules/UsersModule.html":{}}}],["roles/roles.service",{"_index":632,"title":{},"body":{"injectables/UsersService.html":{}}}],["rolescontroller",{"_index":483,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["roleservice",{"_index":496,"title":{},"body":{"controllers/RolesController.html":{},"injectables/UsersService.html":{}}}],["rolesguard",{"_index":195,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AuthModule.html":{},"controllers/NotesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":13,"title":{"modules/RolesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesservice",{"_index":492,"title":{"injectables/RolesService.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":719,"title":{},"body":{"index.html":{}}}],["running",{"_index":717,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":515,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["save",{"_index":425,"title":{},"body":{"controllers/NotesController.html":{},"injectables/NotesService.html":{},"injectables/UsersService.html":{}}}],["save(note",{"_index":458,"title":{},"body":{"injectables/NotesService.html":{}}}],["save(user",{"_index":629,"title":{},"body":{"injectables/UsersService.html":{}}}],["scalable",{"_index":703,"title":{},"body":{"index.html":{}}}],["secretorkey",{"_index":323,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretorprivatekey",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{}}}],["see",{"_index":48,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["serializer",{"_index":428,"title":{},"body":{"controllers/NotesController.html":{}}}],["server",{"_index":704,"title":{},"body":{"index.html":{}}}],["service",{"_index":532,"title":{},"body":{"injectables/RolesService.html":{}}}],["session",{"_index":101,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["set",{"_index":600,"title":{},"body":{"controllers/UsersController.html":{}}}],["setactivation",{"_index":570,"title":{},"body":{"controllers/UsersController.html":{}}}],["setactivation(@param('userid",{"_index":597,"title":{},"body":{"controllers/UsersController.html":{}}}],["setactivation(userid",{"_index":572,"title":{},"body":{"controllers/UsersController.html":{}}}],["setmetadata('public",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('rolecodes",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setusersrole",{"_index":571,"title":{},"body":{"controllers/UsersController.html":{}}}],["setusersrole(@param('userid",{"_index":587,"title":{},"body":{"controllers/UsersController.html":{}}}],["setusersrole(userid",{"_index":577,"title":{},"body":{"controllers/UsersController.html":{}}}],["side",{"_index":705,"title":{},"body":{"index.html":{}}}],["source",{"_index":19,"title":{},"body":{"modules/ApiModule.html":{},"injectables/AppAuthGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"injectables/ConfigurationService.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Note.html":{},"classes/NoteDto.html":{},"controllers/NotesController.html":{},"modules/NotesModule.html":{},"injectables/NotesService.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRolesDto.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["specific",{"_index":501,"title":{},"body":{"guards/RolesGuard.html":{}}}],["specifics",{"_index":504,"title":{},"body":{"guards/RolesGuard.html":{}}}],["sponsors",{"_index":738,"title":{},"body":{"index.html":{}}}],["src/**/*.entity.ts",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["src/.../main.ts",{"_index":695,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorator.ts",{"_index":765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.decorator.ts",{"_index":766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.enum.ts",{"_index":691,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/api/api.module.ts",{"_index":21,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/api/notes/dtos/note.dto.ts",{"_index":362,"title":{},"body":{"classes/NoteDto.html":{},"coverage.html":{}}}],["src/api/notes/dtos/note.dto.ts:11",{"_index":367,"title":{},"body":{"classes/NoteDto.html":{}}}],["src/api/notes/dtos/note.dto.ts:14",{"_index":365,"title":{},"body":{"classes/NoteDto.html":{}}}],["src/api/notes/dtos/note.dto.ts:8",{"_index":366,"title":{},"body":{"classes/NoteDto.html":{}}}],["src/api/notes/entities/note.entity.ts",{"_index":327,"title":{},"body":{"classes/Note.html":{},"coverage.html":{}}}],["src/api/notes/entities/note.entity.ts:12",{"_index":347,"title":{},"body":{"classes/Note.html":{}}}],["src/api/notes/entities/note.entity.ts:15",{"_index":340,"title":{},"body":{"classes/Note.html":{}}}],["src/api/notes/entities/note.entity.ts:18",{"_index":346,"title":{},"body":{"classes/Note.html":{}}}],["src/api/notes/entities/note.entity.ts:22",{"_index":335,"title":{},"body":{"classes/Note.html":{}}}],["src/api/notes/entities/note.entity.ts:9",{"_index":343,"title":{},"body":{"classes/Note.html":{}}}],["src/api/notes/notes.controller.ts",{"_index":370,"title":{},"body":{"controllers/NotesController.html":{},"coverage.html":{}}}],["src/api/notes/notes.controller.ts:21",{"_index":387,"title":{},"body":{"controllers/NotesController.html":{}}}],["src/api/notes/notes.controller.ts:33",{"_index":378,"title":{},"body":{"controllers/NotesController.html":{}}}],["src/api/notes/notes.controller.ts:57",{"_index":384,"title":{},"body":{"controllers/NotesController.html":{}}}],["src/api/notes/notes.module.ts",{"_index":442,"title":{},"body":{"modules/NotesModule.html":{}}}],["src/api/notes/notes.service.ts",{"_index":446,"title":{},"body":{"injectables/NotesService.html":{},"coverage.html":{}}}],["src/api/notes/notes.service.ts:13",{"_index":455,"title":{},"body":{"injectables/NotesService.html":{}}}],["src/api/notes/notes.service.ts:22",{"_index":459,"title":{},"body":{"injectables/NotesService.html":{}}}],["src/api/notes/notes.service.ts:31",{"_index":457,"title":{},"body":{"injectables/NotesService.html":{}}}],["src/api/notes/notes.service.ts:40",{"_index":453,"title":{},"body":{"injectables/NotesService.html":{}}}],["src/api/notes/notes.service.ts:9",{"_index":450,"title":{},"body":{"injectables/NotesService.html":{}}}],["src/api/roles/dtos/role.dto.ts",{"_index":479,"title":{},"body":{"classes/RoleDto.html":{},"coverage.html":{}}}],["src/api/roles/dtos/role.dto.ts:5",{"_index":481,"title":{},"body":{"classes/RoleDto.html":{}}}],["src/api/roles/dtos/role.dto.ts:8",{"_index":480,"title":{},"body":{"classes/RoleDto.html":{}}}],["src/api/roles/entities/role.entity.ts",{"_index":470,"title":{},"body":{"classes/Role.html":{},"coverage.html":{}}}],["src/api/roles/entities/role.entity.ts:11",{"_index":476,"title":{},"body":{"classes/Role.html":{}}}],["src/api/roles/entities/role.entity.ts:14",{"_index":475,"title":{},"body":{"classes/Role.html":{}}}],["src/api/roles/entities/role.enum",{"_index":516,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/api/roles/entities/role.enum.ts",{"_index":692,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/api/roles/roles.controller.ts",{"_index":484,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/api/roles/roles.controller.ts:18",{"_index":491,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/api/roles/roles.module.ts",{"_index":528,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/api/roles/roles.service.ts",{"_index":531,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/api/roles/roles.service.ts:11",{"_index":535,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/api/roles/roles.service.ts:15",{"_index":537,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/api/roles/roles.service.ts:24",{"_index":539,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/api/users/dtos/usersroles.dto.ts",{"_index":609,"title":{},"body":{"classes/UsersRolesDto.html":{},"coverage.html":{}}}],["src/api/users/dtos/usersroles.dto.ts:9",{"_index":611,"title":{},"body":{"classes/UsersRolesDto.html":{}}}],["src/api/users/entities/user.entity.ts",{"_index":544,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/api/users/entities/user.entity.ts:14",{"_index":549,"title":{},"body":{"classes/User.html":{}}}],["src/api/users/entities/user.entity.ts:17",{"_index":548,"title":{},"body":{"classes/User.html":{}}}],["src/api/users/entities/user.entity.ts:20",{"_index":550,"title":{},"body":{"classes/User.html":{}}}],["src/api/users/entities/user.entity.ts:24",{"_index":552,"title":{},"body":{"classes/User.html":{}}}],["src/api/users/entities/user.entity.ts:29",{"_index":557,"title":{},"body":{"classes/User.html":{}}}],["src/api/users/entities/user.entity.ts:7",{"_index":545,"title":{},"body":{"classes/User.html":{}}}],["src/api/users/users.controller.ts",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/api/users/users.controller.ts:17",{"_index":580,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/api/users/users.controller.ts:35",{"_index":575,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/api/users/users.module.ts",{"_index":606,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/api/users/users.service.ts",{"_index":614,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/api/users/users.service.ts:10",{"_index":620,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/api/users/users.service.ts:14",{"_index":626,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/api/users/users.service.ts:27",{"_index":628,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/api/users/users.service.ts:41",{"_index":622,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/api/users/users.service.ts:54",{"_index":630,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/api/users/users.service.ts:63",{"_index":624,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/app.controller.ts",{"_index":108,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":111,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":150,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":151,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:13",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:19",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:10",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:16",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:24",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:39",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/public.decorator.ts",{"_index":660,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/role.decorator.ts",{"_index":663,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/guards/appauth.guard.ts",{"_index":36,"title":{},"body":{"injectables/AppAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/appauth.guard.ts:14",{"_index":58,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["src/auth/guards/appauth.guard.ts:20",{"_index":65,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["src/auth/guards/appauth.guard.ts:30",{"_index":70,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":500,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:13",{"_index":507,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:17",{"_index":508,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:33",{"_index":513,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/interfaces/ijwtpayload.ts",{"_index":311,"title":{},"body":{"interfaces/IJwtPayload.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":312,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:17",{"_index":315,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:9",{"_index":314,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/configuration/configuration.module.ts",{"_index":251,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["src/configuration/configuration.service.ts",{"_index":255,"title":{},"body":{"injectables/ConfigurationService.html":{},"coverage.html":{}}}],["src/configuration/configuration.service.ts:16",{"_index":263,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/configuration/configuration.service.ts:24",{"_index":267,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/configuration/configuration.service.ts:9",{"_index":260,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["src/main.ts",{"_index":666,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":720,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":723,"title":{},"body":{"index.html":{}}}],["start:prod",{"_index":725,"title":{},"body":{"index.html":{}}}],["started",{"_index":697,"title":{"index.html":{}},"body":{}}],["starter",{"_index":712,"title":{},"body":{"index.html":{}}}],["statements",{"_index":646,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["stay",{"_index":746,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":318,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/ConfigurationService.html":{},"interfaces/IJwtPayload.html":{},"classes/Note.html":{},"classes/NoteDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["structure",{"_index":272,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["super",{"_index":80,"title":{},"body":{"injectables/AppAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":102,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["super.login(request",{"_index":99,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["support",{"_index":731,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":756,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":669,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":668,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":290,"title":{},"body":{"injectables/ConfigurationService.html":{},"index.html":{}}}],["test:cov",{"_index":730,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":729,"title":{},"body":{"index.html":{}}}],["tests",{"_index":727,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":737,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":115,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(jwtpayload",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(user",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validate(payload",{"_index":324,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.confservice.get('jwt_expiration_delay",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.encryptpassword(user.password",{"_index":637,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.envconfig",{"_index":279,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["this.envconfig[key",{"_index":281,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["this.hasrole(roles",{"_index":521,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.jwtservice.sign(userpayload",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.noterepository.find",{"_index":464,"title":{},"body":{"injectables/NotesService.html":{}}}],["this.noterepository.findoneorfail",{"_index":468,"title":{},"body":{"injectables/NotesService.html":{}}}],["this.noterepository.remove(note",{"_index":469,"title":{},"body":{"injectables/NotesService.html":{}}}],["this.noterepository.save(note",{"_index":467,"title":{},"body":{"injectables/NotesService.html":{}}}],["this.noteservice.delete(usernote",{"_index":437,"title":{},"body":{"controllers/NotesController.html":{}}}],["this.noteservice.findallbyuser(request.user",{"_index":406,"title":{},"body":{"controllers/NotesController.html":{}}}],["this.noteservice.findonebyidanduser(user",{"_index":416,"title":{},"body":{"controllers/NotesController.html":{}}}],["this.noteservice.save(usernote",{"_index":422,"title":{},"body":{"controllers/NotesController.html":{}}}],["this.reflector.get('public",{"_index":88,"title":{},"body":{"injectables/AppAuthGuard.html":{}}}],["this.reflector.get('rolecodes",{"_index":520,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.rolerepository.find",{"_index":541,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolerepository.findone",{"_index":542,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.roleservice.findall",{"_index":498,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.roleservice.findbyrolecode(rolecode.user",{"_index":639,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":634,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":640,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.create(user",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyemail(payload.email",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyid(userid",{"_index":588,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.save(user",{"_index":593,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.validate(payload",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateinput(config",{"_index":280,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["throw",{"_index":103,"title":{},"body":{"injectables/AppAuthGuard.html":{},"injectables/AuthService.html":{},"injectables/ConfigurationService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["title",{"_index":332,"title":{},"body":{"classes/Note.html":{},"classes/NoteDto.html":{}}}],["touch",{"_index":747,"title":{},"body":{"index.html":{}}}],["tranformation",{"_index":429,"title":{},"body":{"controllers/NotesController.html":{}}}],["transform",{"_index":353,"title":{},"body":{"classes/Note.html":{},"classes/User.html":{}}}],["transform(author",{"_index":358,"title":{},"body":{"classes/Note.html":{}}}],["transform(role",{"_index":564,"title":{},"body":{"classes/User.html":{}}}],["transform(undefined)@manytomany(undefined",{"_index":553,"title":{},"body":{"classes/User.html":{}}}],["transformer",{"_index":354,"title":{},"body":{"classes/Note.html":{},"classes/User.html":{},"classes/UsersRolesDto.html":{},"dependencies.html":{}}}],["true",{"_index":91,"title":{},"body":{"injectables/AppAuthGuard.html":{},"modules/AppModule.html":{},"classes/Role.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["true})@jointable({name",{"_index":555,"title":{},"body":{"classes/User.html":{}}}],["try",{"_index":463,"title":{},"body":{"injectables/NotesService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":752,"title":{},"body":{"index.html":{}}}],["type",{"_index":61,"title":{},"body":{"injectables/AppAuthGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConfigurationService.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Note.html":{},"classes/NoteDto.html":{},"controllers/NotesController.html":{},"injectables/NotesService.html":{},"classes/Role.html":{},"classes/RoleDto.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/UsersRolesDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeorm",{"_index":351,"title":{},"body":{"classes/Note.html":{},"injectables/NotesService.html":{},"classes/Role.html":{},"injectables/RolesService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/NotesModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([note",{"_index":445,"title":{},"body":{"modules/NotesModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":530,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":608,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":711,"title":{},"body":{"index.html":{}}}],["unable",{"_index":424,"title":{},"body":{"controllers/NotesController.html":{}}}],["unauthorizedexception",{"_index":72,"title":{},"body":{"injectables/AppAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["unique",{"_index":474,"title":{},"body":{"classes/Role.html":{},"classes/User.html":{}}}],["unit",{"_index":726,"title":{},"body":{"index.html":{}}}],["updateduser",{"_index":592,"title":{},"body":{"controllers/UsersController.html":{}}}],["updating",{"_index":595,"title":{},"body":{"controllers/UsersController.html":{}}}],["use",{"_index":268,"title":{},"body":{"injectables/ConfigurationService.html":{},"controllers/NotesController.html":{}}}],["useclass",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{}}}],["used",{"_index":505,"title":{},"body":{"guards/RolesGuard.html":{}}}],["usefactory",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":388,"title":{},"body":{"controllers/NotesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["useguards(rolesguard",{"_index":402,"title":{},"body":{"controllers/NotesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":390,"title":{},"body":{"controllers/NotesController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":410,"title":{},"body":{"controllers/NotesController.html":{}}}],["user",{"_index":69,"title":{"classes/User.html":{}},"body":{"injectables/AppAuthGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Note.html":{},"controllers/NotesController.html":{},"injectables/NotesService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user.id",{"_index":635,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.isactive",{"_index":519,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["user.password",{"_index":636,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.roles",{"_index":522,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user[email=${user.email",{"_index":419,"title":{},"body":{"controllers/NotesController.html":{}}}],["userdata",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdata.email",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdata.isactive",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdata.roles.map((userrole",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":576,"title":{},"body":{"controllers/UsersController.html":{}}}],["username",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["usernote",{"_index":413,"title":{},"body":{"controllers/NotesController.html":{}}}],["usernote.author",{"_index":420,"title":{},"body":{"controllers/NotesController.html":{}}}],["usernote.id",{"_index":417,"title":{},"body":{"controllers/NotesController.html":{}}}],["usernote.lastmodificationdate",{"_index":421,"title":{},"body":{"controllers/NotesController.html":{}}}],["usernotes",{"_index":405,"title":{},"body":{"controllers/NotesController.html":{}}}],["userpayload",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["userrepository",{"_index":619,"title":{},"body":{"injectables/UsersService.html":{}}}],["userrole",{"_index":638,"title":{},"body":{"injectables/UsersService.html":{}}}],["userrole.code",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["userroles",{"_index":512,"title":{},"body":{"guards/RolesGuard.html":{}}}],["userroles.some(userrole",{"_index":523,"title":{},"body":{"guards/RolesGuard.html":{}}}],["users",{"_index":562,"title":{},"body":{"classes/User.html":{}}}],["users.controller",{"_index":607,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":582,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":352,"title":{},"body":{"classes/Note.html":{},"controllers/NotesController.html":{},"injectables/NotesService.html":{}}}],["users/users.module",{"_index":26,"title":{},"body":{"modules/ApiModule.html":{}}}],["users_roles",{"_index":556,"title":{},"body":{"classes/User.html":{}}}],["userscontroller",{"_index":567,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersmodule",{"_index":14,"title":{"modules/UsersModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrolesdto",{"_index":578,"title":{"classes/UsersRolesDto.html":{}},"body":{"controllers/UsersController.html":{},"classes/UsersRolesDto.html":{},"coverage.html":{}}}],["usersrolesdto.roles",{"_index":591,"title":{},"body":{"controllers/UsersController.html":{}}}],["usersservice",{"_index":211,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usevalue",{"_index":253,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["valid(['dev",{"_index":288,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["validate",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validatedenvconfig",{"_index":304,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["validateinput",{"_index":258,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["validateinput(envconfig",{"_index":265,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["validatenested",{"_index":612,"title":{},"body":{"classes/UsersRolesDto.html":{}}}],["validatenested()@type(undefined",{"_index":610,"title":{},"body":{"classes/UsersRolesDto.html":{}}}],["validation",{"_index":307,"title":{},"body":{"injectables/ConfigurationService.html":{}}}],["validator",{"_index":368,"title":{},"body":{"classes/NoteDto.html":{},"classes/RoleDto.html":{},"classes/UsersRolesDto.html":{},"dependencies.html":{}}}],["value",{"_index":303,"title":{},"body":{"injectables/ConfigurationService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":473,"title":{},"body":{"classes/Role.html":{}}}],["variable",{"_index":661,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":764,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":721,"title":{},"body":{"index.html":{}}}],["website",{"_index":750,"title":{},"body":{"index.html":{}}}],["world",{"_index":153,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":741,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":15,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/NotesModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/ApiModule.html":{"url":"modules/ApiModule.html","title":"module - ApiModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\n\nNotesModule\n\nNotesModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nNotesModule->ApiModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nApiModule -->\n\nRolesModule->ApiModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nApiModule -->\n\nUsersModule->ApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/api/api.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            NotesModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { NotesModule } from './notes/notes.module';\nimport { UsersModule } from './users/users.module';\nimport { RolesModule } from './roles/roles.module';\n\n@Module({\n    imports: [NotesModule, UsersModule, RolesModule],\n})\nexport class ApiModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppAuthGuard.html":{"url":"injectables/AppAuthGuard.html","title":"injectable - AppAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/appAuth.guard.ts\n        \n\n            \n                Description\n            \n            \n                JWT auth guard to control app's endpoint access\nThis guard is configured globally for the app (see auth.module.ts).\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/appAuth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/appAuth.guard.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleRequest\n                        \n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/appAuth.guard.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    ExecutionContext,\n    Injectable,\n    UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Reflector } from '@nestjs/core';\n\n/**\n * JWT auth guard to control app's endpoint access\n * This guard is configured globally for the app (see auth.module.ts).\n */\n@Injectable()\nexport class AppAuthGuard extends AuthGuard('jwt') {\n\n    constructor(private readonly reflector: Reflector) {\n        super();\n    }\n\n    canActivate(context: ExecutionContext) {\n        // if public metadata is daclared, the endpoint doesn't need auth\n        const isPublic = this.reflector.get('public', context.getHandler());\n        if (isPublic) {\n            return true;\n        }\n        // add your custom authentication logic here\n        // for example, call super.logIn(request) to establish a session.\n        return super.canActivate(context);\n    }\n    handleRequest(err, user, info) {\n        if (err || !user) {\n            throw err || new UnauthorizedException();\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nApiModule\n\nApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            ConfigurationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ApiModule } from './api/api.module';\nimport { ConfigurationModule } from './configuration/configuration.module';\nimport { ConfigurationService } from './configuration/configuration.service';\n\n@Module({\n  imports: [\n    ConfigurationModule,\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigurationModule],\n      useFactory: async (configService: ConfigurationService) => ({\n        type: configService.get('DB_TYPE'),\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: ['src/**/*.entity.ts'],\n        synchronize: true,\n      }) as any,\n      inject: [ConfigurationService],\n    }), AuthModule, ApiModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(jwtPayload: IJwtPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    jwtPayload\n                                    \n                                                IJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { IJwtPayload } from './interfaces/IJWTPayload';\nimport { User } from '../api/users/entities/user.entity';\nimport { Public } from './decorators/public.decorator';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(private readonly authService: AuthService) { }\n\n    @Public()\n    @Post('login')\n    async login(@Body() jwtPayload: IJwtPayload): Promise {\n        return this.authService.login(jwtPayload);\n    }\n\n    @Public()\n    @Post('register')\n    async register(@Body() user: User): Promise {\n        return this.authService.register(user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAppAuthGuard\n\nAppAuthGuard\n\nAuthModule -->\n\nAppAuthGuard->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppAuthGuard\n                        \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { UsersModule } from '../api/users/users.module';\nimport { AppAuthGuard } from './guards/appAuth.guard';\nimport { APP_GUARD } from '@nestjs/core';\nimport { RolesGuard } from './guards/roles.guard';\nimport { ConfigurationService } from '../configuration/configuration.service';\n\n@Module({\n    imports: [\n        UsersModule,\n        PassportModule.register({ defaultStrategy: 'jwt' }),\n        JwtModule.registerAsync({\n            useFactory: async (configService: ConfigurationService) => ({\n                secretOrPrivateKey: configService.get('JWT_SECRET_KEY'),\n                expiresIn: configService.get('JWT_EXPIRATION_DELAY'),\n            }) as any,\n            inject: [ConfigurationService],\n        }),\n    ],\n    controllers: [AuthController],\n    providers: [\n        {\n            provide: APP_GUARD,\n            useClass: AppAuthGuard,\n        },\n        AuthService,\n        JwtStrategy,\n        AppAuthGuard,\n        RolesGuard,\n    ],\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userService: UsersService, confService: ConfigurationService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        confService\n                                                  \n                                                        \n                                                                        ConfigurationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: IJwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                IJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: IJwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                IJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { IJwtPayload } from './interfaces/IJWTPayload';\nimport { UsersService } from '../api/users/users.service';\nimport { User } from '../api/users/entities/user.entity';\nimport { Role } from '../api/roles/entities/role.entity';\nimport { ConfigurationService } from '../configuration/configuration.service';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        private readonly jwtService: JwtService,\n        private readonly userService: UsersService,\n        private readonly confService: ConfigurationService) { }\n\n    public async validate(payload: IJwtPayload): Promise {\n        const user: User = await this.userService.findByEmail(payload.email);\n        if (!user) {\n            throw new HttpException('user not found', HttpStatus.NOT_FOUND);\n        }\n        return user;\n    }\n\n    public async login(payload: IJwtPayload): Promise {\n        const userData = await this.validate(payload);\n        const roles = userData.roles.map((userRole: Role) => userRole.code);\n        const userPayload = { email: userData.email, isActive: userData.isActive, roles };\n        const accessToken = this.jwtService.sign(userPayload);\n\n        return {\n            expires_in: this.confService.get('JWT_EXPIRATION_DELAY'),\n            access_token: accessToken,\n            user: userPayload,\n            status: HttpStatus.OK,\n        };\n\n    }\n\n    public async register(user: User): Promise {\n        return this.userService.create(user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigurationModule.html":{"url":"modules/ConfigurationModule.html","title":"module - ConfigurationModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigurationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\n\nConfigurationService \n\nConfigurationService \n\n\n\nConfigurationModule\n\nConfigurationModule\n\nConfigurationService  -->\n\nConfigurationModule->ConfigurationService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/configuration/configuration.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigurationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigurationService } from './configuration.service';\n\n@Module({\n  providers: [\n    {\n      provide: ConfigurationService,\n      useValue: new ConfigurationService(`environments/${process.env.NODE_ENV}.env`),\n    },\n  ],\n  exports: [ConfigurationService],\n})\nexport class ConfigurationModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigurationService.html":{"url":"injectables/ConfigurationService.html","title":"injectable - ConfigurationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ConfigurationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/configuration/configuration.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                envConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                    Private\n                                validateInput\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(filePath: string)\n                    \n                \n                        \n                            \n                                Defined in src/configuration/configuration.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filePath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/configuration/configuration.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            validateInput\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateInput(envConfig: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/configuration/configuration.service.ts:24\n                \n            \n\n\n            \n                \n                    Use to define env. params structure\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    envConfig\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            envConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/configuration/configuration.service.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Global } from '@nestjs/common';\nimport * as dotenv from 'dotenv';\nimport * as fs from 'fs';\nimport * as Joi from 'joi';\n\n@Global()\n@Injectable()\nexport class ConfigurationService {\n    private readonly envConfig: { [key: string]: string };\n\n    constructor(filePath: string) {\n        const config = dotenv.parse(fs.readFileSync(filePath));\n        this.envConfig = this.validateInput(config);\n    }\n\n    get(key: string): string {\n        return this.envConfig[key];\n    }\n\n    /**\n     * Use to define env. params structure\n     * @param envConfig\n     */\n    private validateInput(envConfig: { [key: string]: string }): { [key: string]: string } {\n        const envVarsSchema: Joi.ObjectSchema = Joi.object({\n            NODE_ENV: Joi.string()\n                .valid(['dev', 'prod', 'test'])\n                .default('dev'),\n            DB_TYPE: Joi.string().required(),\n            DB_HOST: Joi.string().required(),\n            DB_PORT: Joi.number().required(),\n            DB_USERNAME: Joi.string().required(),\n            DB_PASSWORD: Joi.string().required(),\n            DB_NAME: Joi.string().required(),\n            JWT_SECRET_KEY: Joi.string().required(),\n            JWT_EXPIRATION_DELAY: Joi.number().required(),\n        });\n\n        const { error, value: validatedEnvConfig } = Joi.validate(\n            envConfig,\n            envVarsSchema,\n        );\n        if (error) {\n            throw new Error(`Config validation error: ${error.message}`);\n        }\n        return validatedEnvConfig;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IJwtPayload.html":{"url":"interfaces/IJwtPayload.html","title":"interface - IJwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IJwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/IJWTPayload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        password\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IJwtPayload {\n    email: string;\n    password: string;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, configService: ConfigurationService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigurationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: IJwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                IJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { AuthService } from '../auth.service';\nimport { IJwtPayload } from '../interfaces/IJWTPayload';\nimport { ConfigurationService } from '../../configuration/configuration.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor(private readonly authService: AuthService, private readonly configService: ConfigurationService) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            secretOrKey: configService.get('JWT_SECRET_KEY'),\n        });\n    }\n\n    async validate(payload: IJwtPayload) {\n        const user = await this.authService.validate(payload);\n        if (!user) {\n            throw new UnauthorizedException();\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Note.html":{"url":"classes/Note.html","title":"class - Note","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Note\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/notes/entities/note.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                content\n                            \n                            \n                                id\n                            \n                            \n                                lastModificationDate\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/api/notes/entities/note.entity.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            author\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, {nullable: false})@Transform(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/notes/entities/note.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/notes/entities/note.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/notes/entities/note.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastModificationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({type: 'date'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/notes/entities/note.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/notes/entities/note.entity.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, ManyToOne, CreateDateColumn } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\nimport { Transform } from 'class-transformer';\n\n@Entity({ name: 'notes' })\nexport class Note {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    title: string;\n\n    @Column()\n    content: string;\n\n    @CreateDateColumn({ type: 'date' })\n    lastModificationDate: Date;\n\n    @ManyToOne(type => User, { nullable: false })\n    @Transform(author => author.email)\n    author: User;\n\n    constructor(partial: Partial) {\n        Object.assign(this, partial);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoteDto.html":{"url":"classes/NoteDto.html","title":"class - NoteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/notes/dtos/note.dto.ts\n        \n\n            \n                Description\n            \n            \n                Note DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                id\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/notes/dtos/note.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/api/notes/dtos/note.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/notes/dtos/note.dto.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\n/**\n * Note DTO\n */\nexport class NoteDto {\n\n    id: number;\n\n    @IsNotEmpty()\n    title: string;\n\n    @IsNotEmpty()\n    content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotesController.html":{"url":"controllers/NotesController.html","title":"controller - NotesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/notes/notes.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/notes\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAllByUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(request, noteDto: NoteDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(RolesGuard)@Roles(RoleCode.USER, RoleCode.ADMIN)@UseInterceptors(ClassSerializerInterceptor)\n                \n            \n\n            \n                \n                    Defined in src/api/notes/notes.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    noteDto\n                                    \n                                                NoteDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(request, noteId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':noteId')@UseGuards(RolesGuard)@Roles(RoleCode.USER, RoleCode.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/api/notes/notes.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    noteId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAllByUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUser(request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(RolesGuard)@Roles(RoleCode.USER, RoleCode.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/api/notes/notes.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller, Get, UseGuards, Post, Req, HttpException,\n    HttpStatus, Body, UseInterceptors, ClassSerializerInterceptor, Delete, Param,\n} from '@nestjs/common';\nimport { Roles } from '../../auth/decorators/role.decorator';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { RoleCode } from '../roles/entities/role.enum';\nimport { NotesService } from './notes.service';\nimport { Note } from './entities/note.entity';\nimport { NoteDto } from './dtos/Note.dto';\nimport { User } from '../users/entities/user.entity';\n\n@Controller('api/notes')\nexport class NotesController {\n\n    constructor(private readonly noteService: NotesService) { }\n\n    @Get()\n    @UseGuards(RolesGuard)\n    @Roles(RoleCode.USER, RoleCode.ADMIN)\n    async findAllByUser(@Req() request): Promise {\n        const userNotes = await this.noteService.findAllByUser(request.user);\n        if (!userNotes) {\n            throw new HttpException('unable to retrieve notes', HttpStatus.INTERNAL_SERVER_ERROR);\n        }\n        return userNotes;\n    }\n\n    @Post()\n    @UseGuards(RolesGuard)\n    @Roles(RoleCode.USER, RoleCode.ADMIN)\n    @UseInterceptors(ClassSerializerInterceptor)\n    async create(@Req() request, @Body() noteDto: NoteDto): Promise {\n        const user: User = request.user;\n        let userNote: Note = { ...noteDto, lastModificationDate: null, author: null };\n        if (noteDto.id) {\n            userNote = await this.noteService.findOneByIdAndUser(user, userNote.id);\n            if (!userNote) {\n                throw new HttpException(`note[noteId=${noteDto.id}] for user[email=${user.email}] not found`, HttpStatus.NOT_FOUND);\n            }\n        } else {\n            userNote.author = user;\n        }\n        userNote.lastModificationDate = new Date();\n        userNote = await this.noteService.save(userNote);\n        if (!userNote) {\n            const message = noteDto.id ? `unable to save note[noteId=${noteDto.id}]` : 'unable to create new note';\n            throw new HttpException(message, HttpStatus.INTERNAL_SERVER_ERROR);\n        }\n        // To use serializer tranformation, the entity needs to be regenerated\n        return new Note({ ...userNote });\n    }\n\n    @Delete(':noteId')\n    @UseGuards(RolesGuard)\n    @Roles(RoleCode.USER, RoleCode.ADMIN)\n    async delete(@Req() request, @Param('noteId') noteId: number): Promise {\n\n        const user: User = request.user;\n\n        const userNote = await this.noteService.findOneByIdAndUser(user, noteId);\n        if (!userNote) {\n            throw new HttpException(`note[noteId=${noteId}] for user[email=${user.email}] not found`, HttpStatus.NOT_FOUND);\n        }\n        const deletedNote = await this.noteService.delete(userNote);\n        if (!deletedNote) {\n            throw new HttpException(`unable to delete note[noteId=${noteId}]`, HttpStatus.INTERNAL_SERVER_ERROR);\n        }\n        return deletedNote;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotesModule.html":{"url":"modules/NotesModule.html","title":"module - NotesModule","body":"\n                   \n\n\n\n\n    Modules\n    NotesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NotesModule\n\n\n\ncluster_NotesModule_providers\n\n\n\n\nNotesService\n\nNotesService\n\n\n\nNotesModule\n\nNotesModule\n\nNotesModule -->\n\nNotesService->NotesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/api/notes/notes.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NotesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { NotesController } from './notes.controller';\nimport { NotesService } from './notes.service';\nimport { AuthModule } from '../../auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Note } from './entities/note.entity';\n\n@Module({\n  imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([Note])],\n  controllers: [NotesController],\n  providers: [NotesService],\n})\nexport class NotesModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotesService.html":{"url":"injectables/NotesService.html","title":"injectable - NotesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  NotesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/notes/notes.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAllByUser\n                            \n                            \n                                    Async\n                                findOneByIdAndUser\n                            \n                            \n                                    Async\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(noteRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/api/notes/notes.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        noteRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(note: Note)\n                \n            \n\n\n            \n                \n                    Defined in src/api/notes/notes.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                Note\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAllByUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/api/notes/notes.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByIdAndUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByIdAndUser(user: User, noteId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/api/notes/notes.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    noteId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            save\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    save(note: Note)\n                \n            \n\n\n            \n                \n                    Defined in src/api/notes/notes.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                Note\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../users/entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { Note } from './entities/note.entity';\nimport { NoteDto } from './dtos/Note.dto';\n\n@Injectable()\nexport class NotesService {\n    constructor(@InjectRepository(Note)\n    private readonly noteRepository: Repository) { }\n\n    async findAllByUser(user: User): Promise {\n        try {\n            return await this.noteRepository.find({ where: { author: user } });\n        } catch (error) {\n            Logger.error(error);\n            return null;\n        }\n    }\n\n    async save(note: Note): Promise {\n        try {\n            return await this.noteRepository.save(note);\n        } catch (error) {\n            Logger.error(error);\n            return null;\n        }\n    }\n\n    async findOneByIdAndUser(user: User, noteId: number): Promise {\n        try {\n            return await this.noteRepository.findOneOrFail({ where: { id: noteId, author: user } });\n        } catch (error) {\n            Logger.error(error);\n            return null;\n        }\n    }\n\n    async delete(note: Note): Promise {\n        try {\n            return await this.noteRepository.remove(note);\n        } catch (error) {\n            Logger.error(error);\n            return null;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Role.html":{"url":"classes/Role.html","title":"class - Role","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/roles/entities/role.entity.ts\n        \n\n            \n                Description\n            \n            \n                Role entity\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            code\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RoleCode\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/roles/entities/role.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/roles/entities/role.entity.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\nimport { RoleCode } from './role.enum';\n\n/**\n * Role entity\n */\n@Entity({ name: 'roles' })\nexport class Role {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({ type: 'varchar', unique: true })\n    code: RoleCode;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoleDto.html":{"url":"classes/RoleDto.html","title":"class - RoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/roles/dtos/role.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            code\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         RoleCode\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/roles/dtos/role.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/api/roles/dtos/role.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { RoleCode } from '../entities/role.enum';\nimport { IsNotEmpty } from 'class-validator';\n\nexport class RoleDto {\n    id: number;\n\n    @IsNotEmpty()\n    code: RoleCode;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/roles\n            \n\n            \n                Description\n            \n            \n                Roles REST api\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(RolesGuard)@Roles(RoleCode.ADMIN, RoleCode.USER)\n                \n            \n\n            \n                \n                    Defined in src/api/roles/roles.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards, HttpException, HttpStatus, Body, Delete, Post } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { Role } from './entities/role.entity';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/role.decorator';\nimport { RoleCode } from './entities/role.enum';\n\n/**\n * Roles REST api\n */\n@Controller('api/roles')\nexport class RolesController {\n    constructor(private readonly roleService: RolesService) { }\n\n    @Get()\n    @UseGuards(RolesGuard)\n    @Roles(RoleCode.ADMIN, RoleCode.USER)\n    async findAll(): Promise {\n        const roles = await this.roleService.findAll();\n        if (!roles) {\n            throw new HttpException('unable to retrieve roles', HttpStatus.INTERNAL_SERVER_ERROR);\n        }\n        return roles;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n                \n                Description\n                \n                \n                    Role auth guard to control app's endpoint access with specific roles.\nThis guard needs to be filled on each endpoint which need specifics roles to be used.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                    Private\n                                hasRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/roles.guard.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            hasRole\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasRole(roleCodes: RoleCode[], userRoles: Role[])\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/roles.guard.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roleCodes\n                                    \n                                                RoleCode[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRoles\n                                    \n                                                Role[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { Reflector } from '@nestjs/core';\nimport { User } from '../../api/users/entities/user.entity';\nimport { Role } from '../../api/roles/entities/role.entity';\nimport { RoleCode } from 'src/api/roles/entities/role.enum';\n\n/**\n * Role auth guard to control app's endpoint access with specific roles.\n * This guard needs to be filled on each endpoint which need specifics roles to be used.\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n    constructor(private readonly reflector: Reflector) {\n    }\n\n    canActivate(context: ExecutionContext): boolean | Promise | Observable {\n        const request = context.switchToHttp().getRequest();\n        const user: User = request.user;\n\n        if (!user.isActive) {\n            return false;\n        }\n\n        const roles = this.reflector.get('roleCodes', context.getHandler());\n        if (!roles) {\n            return true;\n        }\n\n        return this.hasRole(roles, user.roles);\n    }\n\n    private hasRole(roleCodes: RoleCode[], userRoles: Role[]) {\n        return userRoles.some(userRole => roleCodes.find(roleCode => roleCode === userRole.code) != null);\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/api/roles/roles.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { RolesController } from './roles.controller';\nimport { RolesService } from './roles.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Role } from './entities/role.entity';\nimport { AuthModule } from '../../auth/auth.module';\n\n@Module({\n  imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([Role])],\n  controllers: [RolesController],\n  providers: [RolesService],\n  exports: [\n    RolesService,\n  ],\n})\nexport class RolesModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/roles/roles.service.ts\n        \n\n            \n                Description\n            \n            \n                Roles service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByRoleCode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(roleRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/api/roles/roles.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/api/roles/roles.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByRoleCode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByRoleCode(roleCode: RoleCode)\n                \n            \n\n\n            \n                \n                    Defined in src/api/roles/roles.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roleCode\n                                    \n                                                RoleCode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Role } from './entities/role.entity';\nimport { RoleCode } from './entities/role.enum';\n\n/**\n * Roles service\n */\n@Injectable()\nexport class RolesService {\n    constructor(@InjectRepository(Role)\n    private readonly roleRepository: Repository) { }\n\n    async findAll(): Promise {\n        try {\n            return await this.roleRepository.find();\n        } catch (error) {\n            Logger.error(error);\n            return null;\n        }\n    }\n\n    async findByRoleCode(roleCode: RoleCode): Promise {\n        try {\n            const role = await this.roleRepository.findOne({ where: { roleCode: roleCode.toString() } });\n            return role;\n        } catch (error) {\n            Logger.error(error);\n            return null;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/users/entities/user.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                isActive\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/api/users/entities/user.entity.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 500, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/users/entities/user.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/users/entities/user.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/users/entities/user.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/users/entities/user.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Role[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Transform(undefined)@ManyToMany(undefined, {nullable: false, eager: true})@JoinTable({name: 'users_roles'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/users/entities/user.entity.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, ManyToMany, JoinTable } from 'typeorm';\nimport { Role } from '../../roles/entities/role.entity';\nimport { Exclude, Transform } from 'class-transformer';\n\n@Entity({ name: 'users' })\nexport class User {\n\n    constructor(partial: Partial) {\n        Object.assign(this, partial);\n    }\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({ length: 500, unique: true })\n    email: string;\n\n    @Column()\n    isActive: boolean;\n\n    @Exclude()\n    @Column()\n    password: string;\n\n    @Transform(role => role.name)\n    @ManyToMany(type => Role, { nullable: false, eager: true })\n    @JoinTable({ name: 'users_roles' })\n    roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                setActivation\n                            \n                            \n                                    Async\n                                setUsersRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setActivation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setActivation(userId: number, active: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId/activation')@UseGuards(RolesGuard)@Roles(RoleCode.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/api/users/users.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    active\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setUsersRole\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setUsersRole(userId: number, usersRolesDto: UsersRolesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/roles')@UseGuards(RolesGuard)@Roles(RoleCode.ADMIN)\n                \n            \n\n            \n                \n                    Defined in src/api/users/users.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    usersRolesDto\n                                    \n                                                UsersRolesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, Post, Param, HttpException, HttpStatus, UseGuards, Get, Query } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { User } from './entities/user.entity';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/role.decorator';\nimport { RoleCode } from '../roles/entities/role.enum';\nimport { UsersRolesDto } from './dtos/usersRoles.dto';\n\n@Controller('api/users')\nexport class UsersController {\n\n    constructor(private readonly usersService: UsersService) { }\n\n    @Post(':userId/roles')\n    @UseGuards(RolesGuard)\n    @Roles(RoleCode.ADMIN)\n    async setUsersRole(@Param('userId') userId: number, @Body() usersRolesDto: UsersRolesDto): Promise {\n        const user = await this.usersService.findById(userId);\n        if (!user) {\n            throw new HttpException(`User [ID=${userId}] not found`, HttpStatus.NOT_FOUND);\n        }\n\n        user.roles = usersRolesDto.roles;\n\n        const updatedUser = await this.usersService.save(user);\n        if (!updatedUser) {\n            throw new HttpException(`Error while updating User [ID=${userId}]`, HttpStatus.INTERNAL_SERVER_ERROR);\n        }\n        return updatedUser;\n    }\n\n    @Get(':userId/activation')\n    @UseGuards(RolesGuard)\n    @Roles(RoleCode.ADMIN)\n    async setActivation(@Param('userId') userId: number, @Query('active') active: string): Promise {\n\n        if (!active || (active !== 'true' && active !== 'false')) {\n            throw new HttpException(`The active query param must be set to \\'true\\' or \\'false\\'`, HttpStatus.BAD_REQUEST);\n        }\n        const isActive = active === 'true';\n\n        const user = await this.usersService.findById(userId);\n        if (!user) {\n            throw new HttpException(`User [ID=${userId}] not found`, HttpStatus.NOT_FOUND);\n        }\n\n        user.isActive = isActive;\n\n        const updatedUser = await this.usersService.save(user);\n        if (!updatedUser) {\n            throw new HttpException(`Error while updating User [ID=${userId}]`, HttpStatus.INTERNAL_SERVER_ERROR);\n        }\n        return updatedUser;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/api/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { AuthModule } from '../../auth/auth.module';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [RolesModule, forwardRef(() => AuthModule), TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [\n    UsersService,\n  ],\n})\nexport class UsersModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersRolesDto.html":{"url":"classes/UsersRolesDto.html","title":"class - UsersRolesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersRolesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/users/dtos/usersRoles.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     RoleDto[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ValidateNested()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/api/users/dtos/usersRoles.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ValidateNested } from 'class-validator';\nimport { RoleDto } from '../../roles/dtos/role.dto';\nimport { Type } from 'class-transformer';\n\nexport class UsersRolesDto {\n\n    @ValidateNested()\n    @Type(() => RoleDto)\n    roles: RoleDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                encryptPassword\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(roleService: RolesService, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/api/users/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roleService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/api/users/users.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            encryptPassword\n                        \n                        \n                    \n                \n            \n            \n                \nencryptPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/api/users/users.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/api/users/users.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/api/users/users.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            save\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    save(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/api/users/users.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { Repository } from 'typeorm';\nimport * as crypto from 'crypto';\nimport { RolesService } from '../roles/roles.service';\nimport { RoleCode } from '../roles/entities/role.enum';\n\n@Injectable()\nexport class UsersService {\n    constructor(private readonly roleService: RolesService, @InjectRepository(User)\n    private readonly userRepository: Repository) { }\n\n    async findByEmail(email: string): Promise {\n        try {\n            return await this.userRepository.findOne({\n                where: {\n                    email,\n                },\n            });\n        } catch (error) {\n            Logger.error(error);\n            return null;\n        }\n    }\n\n    async findById(id: number): Promise {\n        try {\n            return await this.userRepository.findOne({\n                where: {\n                    id,\n                },\n            });\n        } catch (error) {\n            Logger.error(error);\n            return null;\n        }\n\n    }\n\n    async create(user: User): Promise {\n        user.id = null;\n        user.password = this.encryptPassword(user.password);\n        try {\n            const userRole = await this.roleService.findByRoleCode(RoleCode.USER);\n            user.roles = [userRole];\n            return await this.userRepository.save(user);\n        } catch (error) {\n            Logger.error(error);\n            return null;\n        }\n    }\n\n    async save(user: User): Promise {\n        try {\n            return await this.userRepository.save(user);\n        } catch (error) {\n            Logger.error(error);\n            return null;\n        }\n    }\n\n    encryptPassword(password: string): string {\n        return crypto.createHmac('sha256', password).digest('hex');\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/api/notes/dtos/note.dto.ts\n            \n            class\n            NoteDto\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/api/notes/entities/note.entity.ts\n            \n            class\n            Note\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/api/notes/notes.controller.ts\n            \n            controller\n            NotesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/api/notes/notes.service.ts\n            \n            injectable\n            NotesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/api/roles/dtos/role.dto.ts\n            \n            class\n            RoleDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/roles/entities/role.entity.ts\n            \n            class\n            Role\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/api/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/api/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/api/users/dtos/usersRoles.dto.ts\n            \n            class\n            UsersRolesDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/api/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/api/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/role.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/appAuth.guard.ts\n            \n            injectable\n            AppAuthGuard\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/auth/interfaces/IJWTPayload.ts\n            \n            interface\n            IJwtPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/configuration/configuration.service.ts\n            \n            injectable\n            ConfigurationService\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^6.0.0\n        \n            @nestjs/core : ^6.0.0\n        \n            @nestjs/jwt : ^6.0.0\n        \n            @nestjs/passport : ^6.0.0\n        \n            @nestjs/platform-express : ^6.0.0\n        \n            @nestjs/typeorm : ^6.1.0\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.9.1\n        \n            dotenv : ^8.0.0\n        \n            joi : ^14.3.1\n        \n            passport : ^0.4.0\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^7.10.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^2.6.2\n        \n            rxjs : ^6.3.3\n        \n            typeorm : ^0.2.17\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RoleCode   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/api/roles/entities/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        RoleCode\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nbash\n$ npm install\nRunning the app\n```bash\ndevelopment\n$ npm run start\nwatch mode\n$ npm run start:dev\nproduction mode\n$ npm run start:prod\n```\nTest\n```bash\nunit tests\n$ npm run test\ne2e tests\n$ npm run test:e2e\ntest coverage\n$ npm run test:cov\n```\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigurationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConfigurationModule\n\n\n\ncluster_ConfigurationModule_exports\n\n\n\ncluster_NotesModule\n\n\n\ncluster_NotesModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nNotesModule\n\nNotesModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nNotesModule->ApiModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\nApiModule -->\n\nRolesModule->ApiModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\nApiModule -->\n\nUsersModule->ApiModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nConfigurationService \n\nConfigurationService \n\nConfigurationService  -->\n\nConfigurationModule->ConfigurationService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAppAuthGuard\n\nAppAuthGuard\n\nAuthModule -->\n\nAppAuthGuard->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nNotesService\n\nNotesService\n\nNotesModule -->\n\nNotesService->NotesModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            Roles   (src/.../role.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/public.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Public\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => SetMetadata('public', true)\n                        \n                    \n\n\n            \n        \n\n    src/auth/decorators/role.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...roleCodes: RoleCode[]) => SetMetadata('roleCodes', roleCodes)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
